with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with Ada.Text_IO; use Ada.Text_IO;

procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   type Integer_Access is access Integer;

   for Integer_Access'Storage_Pool use AGC.Storage.Get.Pool;
   procedure AGC_Visit_Integer_Access (X : System.Address) with
      Inline;
   package AGC_Integer_Access_Ops_Implem is new AGC.Access_Type_Operations
     (Standard.Integer, Integer_Access, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Integer_Access_Ops_Implem.Mark_And_Visit_Access_Type;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access with
      Inline;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access renames
     AGC_Integer_Access_Ops_Implem.Register;
   package P is
      type T is tagged private;

      procedure AGC_Visit_T_Private (X : System.Address) with
         Inline;
      procedure AGC_Visit_T_Private_Classwide (X : System.Address) with
         Inline;
      function Create (X : Integer) return T'Class;
      procedure Print (X : T);
   private
      type T is tagged record
         X : Integer_Access;
      end record;
      procedure AGC_Visit_T (X : System.Address) with
         Inline;
      procedure AGC_Visit (X : access T) with
         Inline;
      procedure AGC_Visit_T_Classwide (X : System.Address) with
         Inline;
   end P;

   package body P is
      procedure AGC_Visit_T_Private (X : System.Address) renames
        Test.P.AGC_Visit_T;
      procedure AGC_Visit_T_Private_Classwide (X : System.Address) renames
        Test.P.AGC_Visit_T_Classwide;
      procedure AGC_Visit_T (X : System.Address) is
         pragma Suppress (All_Checks);
         type Rec_Access is access T'Class with
            Storage_Size => 0;
         for Rec_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, Rec_Access);
         R : T'Class renames Conv (X).all;
      begin
         Test.AGC_Visit_Integer_Access (R.X'Address);
      end AGC_Visit_T;
      procedure AGC_Visit (X : access T) is
      begin
         AGC_Visit_T (X.all'Address);
      end AGC_Visit;
      procedure AGC_Visit_T_Classwide (X : System.Address) is
         pragma Suppress (All_Checks);
         type T_Access is access T'Class with
            Storage_Size => 0;
         for T_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, T_Access);
      begin
         Conv (X).AGC_Visit;
      end AGC_Visit_T_Classwide;
      function Create (X : Integer) return T'Class is
         AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
      begin
         declare
            AGC_Temp_0 : aliased Test.Integer_Access :=
              Test.AGC_Register_Integer_Access
                (Test.Integer_Access'(new Integer'(X)));
            AGC_Dummy_0 : constant AGC.Empty_Type :=
              AGC.Push_Root
                (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
         begin
            return AGC_Ret : T'Class := T'(X => AGC_Temp_0) do
               AGC.Pop_Roots (AGC_Base_Root_Count);
            end return;
         end;
      end Create;

      procedure Print (X : T) is
      begin
         Put_Line (X.X.all'Image);
      end Print;
   end P;

   package Q is
      type T is new P.T with private;

      procedure AGC_Visit_T_Private (X : System.Address) with
         Inline;
      procedure AGC_Visit_T_Private_Classwide (X : System.Address) with
         Inline;
      function Create (X, Y : Integer) return T'Class;
      overriding procedure Print (X : T);
   private
      type T is new P.T with record
         Y : Integer_Access;
      end record;
      procedure AGC_Visit_T (X : System.Address) with
         Inline;
      procedure AGC_Visit (X : access T) with
         Inline;
      procedure AGC_Visit_T_Classwide (X : System.Address) with
         Inline;
   end Q;

   package body Q is
      procedure AGC_Visit_T_Private (X : System.Address) renames
        Test.Q.AGC_Visit_T;
      procedure AGC_Visit_T_Private_Classwide (X : System.Address) renames
        Test.Q.AGC_Visit_T_Classwide;
      procedure AGC_Visit_T (X : System.Address) is
         pragma Suppress (All_Checks);
         type Rec_Access is access T'Class with
            Storage_Size => 0;
         for Rec_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, Rec_Access);
         R : T'Class renames Conv (X).all;
      begin
         Test.P.AGC_Visit_T_Private (X);
         Test.AGC_Visit_Integer_Access (R.Y'Address);
      end AGC_Visit_T;
      procedure AGC_Visit (X : access T) is
      begin
         AGC_Visit_T (X.all'Address);
      end AGC_Visit;
      procedure AGC_Visit_T_Classwide (X : System.Address) is
         pragma Suppress (All_Checks);
         type T_Access is access T'Class with
            Storage_Size => 0;
         for T_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, T_Access);
      begin
         Conv (X).AGC_Visit;
      end AGC_Visit_T_Classwide;
      function Create (X, Y : Integer) return T'Class is
         AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
         function AGC_Func_0 return T;
         function AGC_Func_0 return T is
            AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
            AGC_Temp_1          : aliased Test.Integer_Access :=
              Test.AGC_Register_Integer_Access
                (Test.Integer_Access'(new Integer'(Y)));
            AGC_Dummy_0 : constant AGC.Empty_Type :=
              AGC.Push_Root
                (AGC_Temp_1'Address, Test.AGC_Visit_Integer_Access'Address);
            AGC_Temp_0  : aliased Test.P.T'Class  := P.Create (X);
            AGC_Dummy_1 : constant AGC.Empty_Type :=
              AGC.Push_Root
                (AGC_Temp_0'Address,
                 Test.P.AGC_Visit_T_Private_Classwide'Address);
         begin
            return AGC_Ret : T := (P.T (AGC_Temp_0) with Y => AGC_Temp_1) do
               AGC.Pop_Roots (AGC_Base_Root_Count);
            end return;
         end AGC_Func_0;
         R           : aliased T               := AGC_Func_0;
         AGC_Dummy_0 : constant AGC.Empty_Type :=
           AGC.Push_Root (R'Address, Test.Q.AGC_Visit_T'Address);
      begin
         AGC.Pop_Roots (AGC_Base_Root_Count);
         return R;
      end Create;

      procedure Print (X : T) is
      begin
         P.T (X).Print;
         Put_Line (X.Y.all'Image);
      end Print;
   end Q;

   X           : aliased P.T'Class       := Q.Create (1, 2);
   AGC_Dummy_0 : constant AGC.Empty_Type :=
     AGC.Push_Root (X'Address, Test.P.AGC_Visit_T_Private_Classwide'Address);
begin
   X.Print;
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
