with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with Ada.Text_IO; use Ada.Text_IO;
procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   pragma Default_Storage_Pool (AGC.Storage.Get.Pool);
   type Integer_Access is access Integer;
   procedure AGC_Visit_Integer_Access (X : System.Address);
   procedure AGC_Visit_Integer_Access_Implem is new AGC.Visit_Access_Type
     (Standard.Integer, Integer_Access, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Visit_Integer_Access_Implem;
   procedure Inner (X, Y : Integer_Access) is
   begin
      null;
   end Inner;
begin
   declare
      AGC_Root_Count : constant Natural            := AGC.Root_Count;
      AGC_Temp_1     : aliased Test.Integer_Access := new Integer'(2);
      AGC_Dummy_0    : constant AGC.Empty_Type     :=
        AGC.Push_Root
          (AGC_Temp_1'Address, Test.AGC_Visit_Integer_Access'Address);
      AGC_Temp_0  : aliased Test.Integer_Access := new Integer'(1);
      AGC_Dummy_1 : constant AGC.Empty_Type     :=
        AGC.Push_Root
          (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
   begin
      Inner (AGC_Temp_0, AGC_Temp_1);
      AGC.Pop_Roots (AGC_Root_Count);
   end;
   AGC.Collect;
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
