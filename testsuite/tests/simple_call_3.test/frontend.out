with GC;
with GC.Standard;
with GC.Storage;
with System;
with Ada.Unchecked_Conversion;
use GC.Standard;
with Ada.Text_IO; use Ada.Text_IO;
procedure Test is
   AGC_Base_Root_Count : Natural := GC.Root_Count;
   pragma Default_Storage_Pool (GC.Storage.Pool);
   type Integer_Access is access all Integer;
   procedure Visitor_Test_Integer_Access is new GC.Visit_Access_Type
     (Integer, Integer_Access, Visitor_Standard_Integer);
   procedure Inner (X, Y : Integer_Access) is
      AGC_Base_Root_Count : Natural := GC.Root_Count;
   begin
      GC.Pop_Roots (AGC_Base_Root_Count);
   end Inner;
begin
   declare
      AGC_Root_Count : Natural                     := GC.Root_Count;
      AGC_Temp_1     : aliased Test.Integer_Access := new Integer'(2);
   begin
      GC.Push_Root (AGC_Temp_1'Address, Visitor_Test_Integer_Access'Address);
      declare
         AGC_Temp_0 : aliased Test.Integer_Access := new Integer'(1);
      begin
         GC.Push_Root
           (AGC_Temp_0'Address, Visitor_Test_Integer_Access'Address);
         Inner (AGC_Temp_0, AGC_Temp_1);
      end;
      GC.Pop_Roots (AGC_Root_Count);
   end;
   GC.Collect;
   GC.Pop_Roots (AGC_Base_Root_Count);
end Test;
