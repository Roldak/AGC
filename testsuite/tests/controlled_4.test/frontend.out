with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with AGC;
with Ada.Finalization;

procedure Test is
   type Integer_Access is access Integer;

   for Integer_Access'Storage_Pool use AGC.Storage.Get.Pool;
   procedure AGC_Visit_Integer_Access (X : System.Address) with
     Inline;
   package AGC_Integer_Access_Ops_Implem is new AGC.Access_Type_Operations
     (Standard.Integer, Integer_Access, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Integer_Access_Ops_Implem.Mark_And_Visit_Access_Type;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access with
     Inline;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access renames
     AGC_Integer_Access_Ops_Implem.Register;
   package Foo is
      type T is private;
      procedure AGC_Visit_T_Private (X : System.Address) with
        Inline;
   private
      type T is new Ada.Finalization.Controlled with record
         X : Integer_Access;
      end record;
      procedure AGC_Visit_T (X : System.Address) with
        Inline;
      procedure AGC_Visit (X : access T) with
        Inline;
      procedure AGC_Visit_T_Classwide (X : System.Address) with
        Inline;
   end Foo;

   package body Foo is
      procedure AGC_Visit_T_Private (X : System.Address) renames
        Test.Foo.AGC_Visit_T;
      procedure AGC_Visit_T (X : System.Address) is
         pragma Suppress (All_Checks);
         type Rec_Access is access T'Class with
           Storage_Size => 0;
         for Rec_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, Rec_Access);
         R : T'Class renames Conv (X).all;
      begin
         AGC.No_Op (X);
         Test.AGC_Visit_Integer_Access (R.X'Address);
      end AGC_Visit_T;
      procedure AGC_Visit (X : access T) is
      begin
         AGC_Visit_T (X.all'Address);
      end AGC_Visit;
      procedure AGC_Visit_T_Classwide (X : System.Address) is
         pragma Suppress (All_Checks);
         type T_Access is access T'Class with
           Storage_Size => 0;
         for T_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, T_Access);
      begin
         Conv (X).AGC_Visit;
      end AGC_Visit_T_Classwide;
   end Foo;
   package Bar is
      type T_Access is access Foo.T;
      for T_Access'Storage_Pool use AGC.Storage.Get.Pool;
      procedure AGC_Visit_T_Access (X : System.Address) with
        Inline;
      function AGC_Register_T_Access (X : T_Access) return T_Access with
        Inline;
   end Bar;

   package body Bar is
      package AGC_T_Access_Ops_Implem is new AGC.Access_Type_Operations
        (Test.Foo.T, T_Access, False, Test.Foo.AGC_Visit_T_Private);
      procedure AGC_Visit_T_Access (X : System.Address) renames
        AGC_T_Access_Ops_Implem.Mark_And_Visit_Access_Type;
      function AGC_Register_T_Access (X : T_Access) return T_Access renames
        AGC_T_Access_Ops_Implem.Register;
   end Bar;
   procedure Main is
      AGC_Base_Root_Count : constant Natural        := AGC.Root_Count;
      X                   : aliased Bar.T_Access    :=
        Test.Bar.AGC_Register_T_Access (Test.Bar.T_Access'(new Foo.T));
      AGC_Dummy_0         : constant AGC.Empty_Type :=
        AGC.Push_Root (X'Address, Test.Bar.AGC_Visit_T_Access'Address);
   begin
      AGC.Pop_Roots (AGC_Base_Root_Count);
   end Main;
begin
   Main;
   AGC.Collect;
end Test;
