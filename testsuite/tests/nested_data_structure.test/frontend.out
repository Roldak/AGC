with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   type Integer_Access is access Integer with
      Storage_Pool => AGC.Storage.Get.Pool;
   procedure AGC_Visit_Integer_Access (X : System.Address);
   procedure AGC_Visit_Integer_Access_Implem is new AGC.Visit_Access_Type
     (Standard.Integer, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Visit_Integer_Access_Implem;
   type T is record
      X     : Integer;
      Dummy : Integer_Access := null;
   end record;
   procedure AGC_Visit_T (X : System.Address);
   procedure AGC_Visit_T (X : System.Address) is
      pragma Suppress (Accessibility_Check);
      type Rec_Access is access all T;
      for Rec_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion
        (System.Address, Rec_Access);
      R : T renames Conv (X).all;
   begin
      declare
         C : aliased Test.Integer_Access := R.Dummy;
      begin
         Test.AGC_Visit_Integer_Access (C'Address);
      end;
   end AGC_Visit_T;
   type T_Access is access T with
      Storage_Pool => AGC.Storage.Get.Pool;
   procedure AGC_Visit_T_Access (X : System.Address);
   procedure AGC_Visit_T_Access_Implem is new AGC.Visit_Access_Type
     (Test.T, False, Test.AGC_Visit_T);
   procedure AGC_Visit_T_Access (X : System.Address) renames
     AGC_Visit_T_Access_Implem;
   type U is record
      A : T_Access;
   end record;
   procedure AGC_Visit_U (X : System.Address);
   procedure AGC_Visit_U (X : System.Address) is
      pragma Suppress (Accessibility_Check);
      type Rec_Access is access all U;
      for Rec_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion
        (System.Address, Rec_Access);
      R : U renames Conv (X).all;
   begin
      declare
         C : aliased Test.T_Access := R.A;
      begin
         Test.AGC_Visit_T_Access (C'Address);
      end;
   end AGC_Visit_U;
   type U_Access is access U with
      Storage_Pool => AGC.Storage.Get.Pool;
   procedure AGC_Visit_U_Access (X : System.Address);
   procedure AGC_Visit_U_Access_Implem is new AGC.Visit_Access_Type
     (Test.U, False, Test.AGC_Visit_U);
   procedure AGC_Visit_U_Access (X : System.Address) renames
     AGC_Visit_U_Access_Implem;
   function AGC_Func_0 return U_Access;
   function AGC_Func_0 return U_Access is
      AGC_Base_Root_Count : constant Natural        := AGC.Root_Count;
      AGC_Temp_0 : aliased Test.T_Access   := new T'(X => 1, others => <>);
      AGC_Dummy_0         : constant AGC.Empty_Type :=
        AGC.Push_Root (AGC_Temp_0'Address, Test.AGC_Visit_T_Access'Address);
   begin
      return AGC_Ret : U_Access := new U'(A => AGC_Temp_0) do
         AGC.Pop_Roots (AGC_Base_Root_Count);
      end return;
   end AGC_Func_0;
   X           : aliased U_Access        := AGC_Func_0;
   AGC_Dummy_0 : constant AGC.Empty_Type :=
     AGC.Push_Root (X'Address, Test.AGC_Visit_U_Access'Address);
begin
   AGC.Collect;
   X.A.X := 2;
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
