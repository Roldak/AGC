with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   pragma Default_Storage_Pool (AGC.Storage.Get.Pool);
   type Integer_Access is access Integer;
   procedure AGC_Visit_Integer_Access (X : System.Address);
   procedure AGC_Visit_Integer_Access_Implem is new AGC.Visit_Access_Type
     (Standard.Integer, Integer_Access, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Visit_Integer_Access_Implem;
   function F return Integer_Access is
   begin
      return AGC_Ret : Integer_Access := new Integer'(15) do
         null;
      end return;
   end F;
   X           : aliased Integer_Access  := (new Integer'(3));
   AGC_Dummy_0 : constant AGC.Empty_Type :=
     AGC.Push_Root (X'Address, Test.AGC_Visit_Integer_Access'Address);
   function AGC_Func_0 return Integer;
   function AGC_Func_0 return Integer is
      AGC_Base_Root_Count : constant Natural            := AGC.Root_Count;
      AGC_Temp_0          : aliased Test.Integer_Access := F;
      AGC_Dummy_0         : constant AGC.Empty_Type     :=
        AGC.Push_Root
          (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
   begin
      AGC.Pop_Roots (AGC_Base_Root_Count);
      return Integer_Access (AGC_Temp_0).all;
   end AGC_Func_0;
   Y : Integer := AGC_Func_0;
begin
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
