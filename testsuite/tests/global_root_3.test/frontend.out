with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   pragma Default_Storage_Pool (AGC.Storage.Get.Pool);
   type Integer_Access is access Integer;
   procedure AGC_Visit_Integer_Access (X : System.Address);
   procedure AGC_Visit_Integer_Access_Implem is new AGC.Visit_Access_Type
     (Standard.Integer, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Visit_Integer_Access_Implem;
begin
   declare
      AGC_Root_Count : constant Natural := AGC.Root_Count;
      package Pkg is
         X           : aliased Integer_Access;
         AGC_Dummy_0 : constant AGC.Empty_Type :=
           AGC.Push_Root (X'Address, Test.AGC_Visit_Integer_Access'Address);
      end Pkg;
   begin
      Pkg.X := new Integer'(2);
      AGC.Pop_Roots (AGC_Root_Count);
   end;
   AGC.Collect;
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
