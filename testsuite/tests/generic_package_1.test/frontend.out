with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   generic
      type T is private;
      type U is private;
      with procedure AGC_Visit_T_Private (X : System.Address);
      with procedure AGC_Visit_U_Private (X : System.Address);
   package Pkg is
      function Foo (X : U) return T;
   end Pkg;

   package body Pkg is
      function Foo (X : U) return T is
         AGC_Base_Root_Count : constant Natural        := AGC.Root_Count;
         Y                   : aliased T;
         AGC_Dummy_0         : constant AGC.Empty_Type :=
           AGC.Push_Root (Y'Address, Test.Pkg.AGC_Visit_T_Private'Address);
      begin
         AGC.Pop_Roots (AGC_Base_Root_Count);
         return Y;
      end Foo;
   end Pkg;

   package My_Pkg is new Pkg
     (Integer, Boolean, AGC_Visit_T_Private => AGC.No_Op,
      AGC_Visit_U_Private                   => AGC.No_Op);
begin
   null;
end Test;
