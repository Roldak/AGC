with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with Ada.Text_IO; use Ada.Text_IO;

procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   type Integer_Access is access Integer;

   for Integer_Access'Storage_Pool use AGC.Storage.Get.Pool;
   procedure AGC_Visit_Integer_Access (X : System.Address) with
      Inline;
   package AGC_Integer_Access_Ops_Implem is new AGC.Access_Type_Operations
     (Standard.Integer, Integer_Access, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Integer_Access_Ops_Implem.Mark_And_Visit_Access_Type;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access with
      Inline;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access renames
     AGC_Integer_Access_Ops_Implem.Register;
   package Pkg_T is
      type T is tagged record
         X : Integer_Access;
      end record;

      procedure AGC_Visit_T (X : System.Address) with
         Inline;
      procedure AGC_Visit (X : access T) with
         Inline;
      procedure AGC_Visit_T_Classwide (X : System.Address) with
         Inline;
      procedure Print (X : T);
   end Pkg_T;

   package body Pkg_T is
      procedure AGC_Visit_T (X : System.Address) is
         pragma Suppress (All_Checks);
         type Rec_Access is access T'Class with
            Storage_Size => 0;
         for Rec_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, Rec_Access);
         R : T'Class renames Conv (X).all;
      begin
         Test.AGC_Visit_Integer_Access (R.X'Address);
      end AGC_Visit_T;
      procedure AGC_Visit (X : access T) is
      begin
         AGC_Visit_T (X.all'Address);
      end AGC_Visit;
      procedure AGC_Visit_T_Classwide (X : System.Address) is
         pragma Suppress (All_Checks);
         type T_Access is access T'Class with
            Storage_Size => 0;
         for T_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, T_Access);
      begin
         Conv (X).AGC_Visit;
      end AGC_Visit_T_Classwide;
      procedure Print (X : T) is
      begin
         Put_Line (X.X.all'Image);
      end Print;
   end Pkg_T;

   package Pkg_U is
      type U is new Pkg_T.T with record
         Y : Integer_Access;
      end record;
      procedure AGC_Visit_U (X : System.Address) with
         Inline;
      overriding procedure AGC_Visit (X : access U) with
         Inline;
      procedure AGC_Visit_U_Classwide (X : System.Address) with
         Inline;
      procedure Print (X : U);
   end Pkg_U;

   package body Pkg_U is
      procedure AGC_Visit_U (X : System.Address) is
         pragma Suppress (All_Checks);
         type Rec_Access is access U'Class with
            Storage_Size => 0;
         for Rec_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, Rec_Access);
         R : U'Class renames Conv (X).all;
      begin
         Test.Pkg_T.AGC_Visit_T (X);
         Test.AGC_Visit_Integer_Access (R.Y'Address);
      end AGC_Visit_U;
      overriding procedure AGC_Visit (X : access U) is
      begin
         AGC_Visit_U (X.all'Address);
      end AGC_Visit;
      procedure AGC_Visit_U_Classwide (X : System.Address) is
         pragma Suppress (All_Checks);
         type T_Access is access U'Class with
            Storage_Size => 0;
         for T_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, T_Access);
      begin
         Conv (X).AGC_Visit;
      end AGC_Visit_U_Classwide;
      procedure Print (X : U) is
      begin
         Put_Line (X.X.all'Image & " " & X.Y.all'Image);
      end Print;
   end Pkg_U;

   function AGC_Func_0 return Pkg_U.U;
   function AGC_Func_0 return Pkg_U.U is
      AGC_Base_Root_Count : constant Natural            := AGC.Root_Count;
      AGC_Temp_0          : aliased Test.Integer_Access :=
        Test.AGC_Register_Integer_Access
          (Test.Integer_Access'(new Integer'(2)));
      AGC_Dummy_0 : constant AGC.Empty_Type :=
        AGC.Push_Root
          (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
   begin
      return
        AGC_Ret : Pkg_U.U :=
          (X =>
             Test.AGC_Register_Integer_Access
               (Test.Integer_Access'(new Integer'(1))),
           Y => AGC_Temp_0)
      do
         AGC.Pop_Roots (AGC_Base_Root_Count);
      end return;
   end AGC_Func_0;
   X           : aliased Pkg_U.U         := AGC_Func_0;
   AGC_Dummy_0 : constant AGC.Empty_Type :=
     AGC.Push_Root (X'Address, Test.Pkg_U.AGC_Visit_U'Address);
begin
   X.Print;
   AGC.Collect;
   X.Print;
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
