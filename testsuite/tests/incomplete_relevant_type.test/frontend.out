with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   type T;
   type T_Access is access T with
      Storage_Pool => AGC.Storage.Get.Pool;
   type T is record
      X : T_Access;
   end record;
   procedure AGC_Visit_T (X : System.Address);
   procedure AGC_Visit_T_Access (X : System.Address);
   procedure AGC_Visit_T_Access_Implem is new AGC.Mark_And_Visit_Access_Type
     (Test.T, False, Test.AGC_Visit_T);
   procedure AGC_Visit_T_Access (X : System.Address) renames
     AGC_Visit_T_Access_Implem;
   procedure AGC_Visit_T (X : System.Address) is
      pragma Suppress (Accessibility_Check);
      type Rec_Access is access all T;
      for Rec_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion
        (System.Address, Rec_Access);
      R : T renames Conv (X).all;
   begin
      declare
         C : aliased Test.T_Access := R.X;
      begin
         Test.AGC_Visit_T_Access (C'Address);
      end;
   end AGC_Visit_T;
begin
   null;
end Test;
