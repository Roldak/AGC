with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with System.Address_Image;
with Ada.Text_IO; use Ada.Text_IO;

procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   type Integer_Access is access all Integer;

   for Integer_Access'Storage_Pool use AGC.Storage.Get.Pool;
   procedure AGC_Visit_Integer_Access (X : System.Address) with
      Inline;
   package AGC_Integer_Access_Ops_Implem is new AGC.Access_Type_Operations
     (Standard.Integer, Integer_Access, True, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Integer_Access_Ops_Implem.Mark_And_Visit_Access_Type;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access with
      Inline;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access renames
     AGC_Integer_Access_Ops_Implem.Register;
   type Rec is record
      X : aliased Integer;
      Y : aliased Integer;
      Z : Integer_Access;
   end record;

   procedure AGC_Visit_Rec (X : System.Address) with
      Inline;
   procedure AGC_Visit_Rec (X : System.Address) is
      pragma Suppress (All_Checks);
      type Rec_Access is access Rec with
         Storage_Size => 0;
      for Rec_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion
        (System.Address, Rec_Access);
      R : Rec renames Conv (X).all;
   begin
      Test.AGC_Visit_Integer_Access (R.Z'Address);
   end AGC_Visit_Rec;
   R           : aliased Rec             := (Z => null, others => 0);
   AGC_Dummy_0 : constant AGC.Empty_Type :=
     AGC.Push_Root (R'Address, Test.AGC_Visit_Rec'Address);
   A           : aliased Integer_Access  := R.Y'Unchecked_Access;
   AGC_Dummy_1 : constant AGC.Empty_Type :=
     AGC.Push_Root (A'Address, Test.AGC_Visit_Integer_Access'Address);
begin
   AGC.Collect;
   Put_Line (R.X'Image);
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
