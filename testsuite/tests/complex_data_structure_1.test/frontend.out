with GC;
with GC.Standard; use GC.Standard;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   AGC_Base_Root_Count : Natural := GC.Root_Count;
   type Quad_Tree;
   type Quad_Tree_Access is access all Quad_Tree;
   type Quad_Tree_Access_Array is
     array (Positive range <>) of Quad_Tree_Access;
   type Quad_Tree is record
      Value : Integer;
      Nodes : Quad_Tree_Access_Array (1 .. 4);
   end record;
   function AGC_Register is new GC.Register (Quad_Tree);
   procedure Visitor_Test_Quad_Tree (X : System.Address);
   function AGC_Register is new GC.Register (Quad_Tree_Access);
   procedure Visitor_Test_Quad_Tree_Access is new GC.Visit_Access_Type
     (Quad_Tree, Quad_Tree_Access, Visitor_Test_Quad_Tree);
   function AGC_Register is new GC.Register (Quad_Tree_Access_Array);
   procedure Visitor_Test_Quad_Tree_Access_Array is new GC.Visit_Array_Type
     (Quad_Tree_Access, Positive, Visitor_Test_Quad_Tree_Access);
   procedure Visitor_Test_Quad_Tree (X : System.Address) is
      pragma Suppress (Accessibility_Check);
      type Rec_Access is access all Quad_Tree;
      for Rec_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion
        (System.Address, Rec_Access);
      R : aliased Quad_Tree := Conv (X).all;
   begin
      declare
         C : aliased Test.Quad_Tree_Access_Array := R.Nodes;
      begin
         Visitor_Test_Quad_Tree_Access_Array (C'Address);
      end;
   end Visitor_Test_Quad_Tree;
   X : aliased Quad_Tree_Access;
begin
   GC.Push_Root (X'Address, Visitor_Test_Quad_Tree_Access'Address);
   declare
      AGC_Root_Count : Natural := GC.Root_Count;
   begin
      declare
         AGC_Temp_3 : aliased Test.Quad_Tree_Access_Array :=
           (null, null, null, null);
      begin
         GC.Push_Root
           (AGC_Temp_3'Address, Visitor_Test_Quad_Tree_Access_Array'Address);
         declare
            AGC_Temp_2 : aliased Test.Quad_Tree_Access :=
              AGC_Register (new Quad_Tree'(Value => 2, Nodes => AGC_Temp_3));
         begin
            GC.Push_Root
              (AGC_Temp_2'Address, Visitor_Test_Quad_Tree_Access'Address);
            declare
               AGC_Temp_1 : aliased Test.Quad_Tree_Access_Array :=
                 (1 => null, 2 => AGC_Temp_2, 3 => null, 4 => null);
            begin
               GC.Push_Root
                 (AGC_Temp_1'Address,
                  Visitor_Test_Quad_Tree_Access_Array'Address);
               declare
                  AGC_Temp_0 : aliased Test.Quad_Tree_Access :=
                    AGC_Register
                      (new Quad_Tree'(Value => 5, Nodes => AGC_Temp_1));
               begin
                  GC.Push_Root
                    (AGC_Temp_0'Address,
                     Visitor_Test_Quad_Tree_Access'Address);
                  X := AGC_Temp_0;
               end;
            end;
         end;
      end;
      GC.Pop_Roots (AGC_Root_Count);
   end;
   GC.Collect;
   GC.Pop_Roots (AGC_Base_Root_Count);
end Test;
