with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   type Quad_Tree;

   type Quad_Tree_Access is access Quad_Tree;

   type Quad_Tree_Access_Array is
     array (Positive range <>) of Quad_Tree_Access;

   type Quad_Tree is record
      Value : Integer;
      Nodes : Quad_Tree_Access_Array (1 .. 4);
   end record;

   procedure AGC_Visit_Quad_Tree (X : System.Address) with
      Inline;
   for Quad_Tree_Access'Storage_Pool use AGC.Storage.Get.Pool;
   procedure AGC_Visit_Quad_Tree_Access (X : System.Address) with
      Inline;
   package AGC_Quad_Tree_Access_Ops_Implem is new AGC.Access_Type_Operations
     (Test.Quad_Tree, Quad_Tree_Access, False, Test.AGC_Visit_Quad_Tree);
   procedure AGC_Visit_Quad_Tree_Access (X : System.Address) renames
     AGC_Quad_Tree_Access_Ops_Implem.Mark_And_Visit_Access_Type;
   function AGC_Register_Quad_Tree_Access
     (X : Quad_Tree_Access) return Quad_Tree_Access with
      Inline;
   function AGC_Register_Quad_Tree_Access
     (X : Quad_Tree_Access) return Quad_Tree_Access renames
     AGC_Quad_Tree_Access_Ops_Implem.Register;
   procedure AGC_Visit_Quad_Tree_Access_Array is new AGC
     .Visit_Unconstrained_Array_1_Type
     (Quad_Tree_Access, Positive, Quad_Tree_Access_Array,
      Test.AGC_Visit_Quad_Tree_Access);
   procedure AGC_Visit_Quad_Tree (X : System.Address) is
      pragma Suppress (All_Checks);
      type Rec_Access is access Quad_Tree with
         Storage_Size => 0;
      for Rec_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion
        (System.Address, Rec_Access);
      R : Quad_Tree renames Conv (X).all;
   begin
      Test.AGC_Visit_Quad_Tree_Access_Array (R.Nodes'Address);
   end AGC_Visit_Quad_Tree;
   X           : aliased Quad_Tree_Access;
   AGC_Dummy_0 : constant AGC.Empty_Type :=
     AGC.Push_Root (X'Address, Test.AGC_Visit_Quad_Tree_Access'Address);
begin
   begin
      declare
         AGC_Temp_2 : aliased Test.Quad_Tree_Access_Array :=
           (null, null, null, null);
         AGC_Dummy_1 : constant AGC.Empty_Type :=
           AGC.Push_Root
             (AGC_Temp_2'Address,
              Test.AGC_Visit_Quad_Tree_Access_Array'Address);
         AGC_Temp_1 : aliased Test.Quad_Tree_Access :=
           Test.AGC_Register_Quad_Tree_Access
             (Test.Quad_Tree_Access'
                (new Quad_Tree'(Value => 2, Nodes => AGC_Temp_2)));
         AGC_Dummy_2 : constant AGC.Empty_Type :=
           AGC.Push_Root
             (AGC_Temp_1'Address, Test.AGC_Visit_Quad_Tree_Access'Address);
         AGC_Temp_0 : aliased Test.Quad_Tree_Access_Array :=
           (1 => null, 2 => AGC_Temp_1, 3 => null, 4 => null);
         AGC_Dummy_3 : constant AGC.Empty_Type :=
           AGC.Push_Root
             (AGC_Temp_0'Address,
              Test.AGC_Visit_Quad_Tree_Access_Array'Address);
      begin
         X :=
           Test.AGC_Register_Quad_Tree_Access
             (Test.Quad_Tree_Access'
                (new Quad_Tree'(Value => 5, Nodes => AGC_Temp_0)));
      end;
   end;
   AGC.Collect;
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
