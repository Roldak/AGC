with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   type Quad_Tree;
   type Quad_Tree_Access is access Quad_Tree with
      Storage_Pool => AGC.Storage.Get.Pool;
   type Quad_Tree_Access_Array is
     array (Positive range <>) of Quad_Tree_Access;
   type Quad_Tree is record
      Value : Integer;
      Nodes : Quad_Tree_Access_Array (1 .. 4);
   end record;
   procedure AGC_Visit_Quad_Tree (X : System.Address);
   procedure AGC_Visit_Quad_Tree_Access (X : System.Address);
   procedure AGC_Visit_Quad_Tree_Access_Implem is new AGC.Visit_Access_Type
     (Test.Quad_Tree, False, Test.AGC_Visit_Quad_Tree);
   procedure AGC_Visit_Quad_Tree_Access (X : System.Address) renames
     AGC_Visit_Quad_Tree_Access_Implem;
   procedure AGC_Visit_Quad_Tree_Access_Array is new AGC
     .Visit_Unconstrained_Array_1_Type
     (Quad_Tree_Access, Positive, Quad_Tree_Access_Array,
      Test.AGC_Visit_Quad_Tree_Access);
   procedure AGC_Visit_Quad_Tree (X : System.Address) is
      pragma Suppress (Accessibility_Check);
      type Rec_Access is access all Quad_Tree;
      for Rec_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion
        (System.Address, Rec_Access);
      R : Quad_Tree renames Conv (X).all;
   begin
      declare
         C : aliased Test.Quad_Tree_Access_Array := R.Nodes;
      begin
         Test.AGC_Visit_Quad_Tree_Access_Array (C'Address);
      end;
   end AGC_Visit_Quad_Tree;
   X           : aliased Quad_Tree_Access;
   AGC_Dummy_0 : constant AGC.Empty_Type :=
     AGC.Push_Root (X'Address, Test.AGC_Visit_Quad_Tree_Access'Address);
begin
   begin
      declare
         AGC_Temp_2 : aliased Test.Quad_Tree_Access_Array :=
           (null, null, null, null);
         AGC_Dummy_1 : constant AGC.Empty_Type :=
           AGC.Push_Root
             (AGC_Temp_2'Address,
              Test.AGC_Visit_Quad_Tree_Access_Array'Address);
         AGC_Temp_1 : aliased Test.Quad_Tree_Access :=
           new Quad_Tree'(Value => 2, Nodes => AGC_Temp_2);
         AGC_Dummy_2 : constant AGC.Empty_Type :=
           AGC.Push_Root
             (AGC_Temp_1'Address, Test.AGC_Visit_Quad_Tree_Access'Address);
         AGC_Temp_0 : aliased Test.Quad_Tree_Access_Array :=
           (1 => null, 2 => AGC_Temp_1, 3 => null, 4 => null);
         AGC_Dummy_3 : constant AGC.Empty_Type :=
           AGC.Push_Root
             (AGC_Temp_0'Address,
              Test.AGC_Visit_Quad_Tree_Access_Array'Address);
      begin
         X := new Quad_Tree'(Value => 5, Nodes => AGC_Temp_0);
      end;
   end;
   AGC.Collect;
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
