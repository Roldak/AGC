with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with AGC;

procedure Test is
   Ex : exception;

   type Integer_Access is access Integer;

   for Integer_Access'Storage_Pool use AGC.Storage.Get.Pool;
   procedure AGC_Visit_Integer_Access (X : System.Address) with
     Inline;
   package AGC_Integer_Access_Ops_Implem is new AGC.Access_Type_Operations
     (Standard.Integer, Integer_Access, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Integer_Access_Ops_Implem.Mark_And_Visit_Access_Type;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access with
     Inline;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access renames
     AGC_Integer_Access_Ops_Implem.Register;
   procedure Foo is
      AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
      procedure Bar is
         AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
         type Local_Access is access all Integer;
         for Local_Access'Storage_Pool use AGC.Storage.Get.Pool;
         procedure AGC_Visit_Local_Access (X : System.Address) with
           Inline;
         package AGC_Local_Access_Ops_Implem is new AGC.Access_Type_Operations
           (Standard.Integer, Local_Access, True, AGC.No_Op);
         procedure AGC_Visit_Local_Access (X : System.Address) renames
           AGC_Local_Access_Ops_Implem.Mark_And_Visit_Access_Type;
         function AGC_Register_Local_Access
           (X : Local_Access) return Local_Access with
           Inline;
         function AGC_Register_Local_Access
           (X : Local_Access) return Local_Access renames
           AGC_Local_Access_Ops_Implem.Register;
         X           : aliased Integer         := 42;
         Y           : aliased Local_Access    := X'Access;
         AGC_Dummy_0 : constant AGC.Empty_Type :=
           AGC.Push_Root
             (Y'Address, Test.Foo.Bar.AGC_Visit_Local_Access'Address);
      begin
         raise Ex;
      end Bar;

      V           : aliased Integer_Access  :=
        Test.AGC_Register_Integer_Access
          (Test.Integer_Access'(new Integer'(4)));
      AGC_Dummy_0 : constant AGC.Empty_Type :=
        AGC.Push_Root (V'Address, Test.AGC_Visit_Integer_Access'Address);
   begin
      Bar;
      AGC.Pop_Roots (AGC_Base_Root_Count);
   exception
      when Ex =>
         AGC.Pop_Roots (AGC_Base_Root_Count + 1);
         AGC.Collect;
         AGC.Pop_Roots (AGC_Base_Root_Count);
   end Foo;
begin
   Foo;
end Test;
