with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   type Integer_Access is access Integer with
      Storage_Pool => AGC.Storage.Get.Pool;
   procedure AGC_Visit_Integer_Access (X : System.Address);
   procedure AGC_Visit_Integer_Access_Implem is new AGC.Visit_Access_Type
     (Standard.Integer, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Visit_Integer_Access_Implem;
   function Foo (X : Integer_Access) return Integer_Access;
   function Foo (X : Integer_Access) return Integer_Access is
   begin
      return (X);
   end Foo;
   function Bar (X : Integer_Access) return Integer;
   function Bar (X : Integer_Access) return Integer is
   begin
      return (X.all);
   end Bar;
   function AGC_Func_0 return Integer_Access;
   function AGC_Func_0 return Integer_Access is
      AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
      function AGC_Func_1 return Test.Integer_Access is
         AGC_Base_Root_Count : constant Natural            := AGC.Root_Count;
         AGC_Temp_2          : aliased Test.Integer_Access := new Integer'(42);
         AGC_Dummy_0         : constant AGC.Empty_Type     :=
           AGC.Push_Root
             (AGC_Temp_2'Address, Test.AGC_Visit_Integer_Access'Address);
         AGC_Temp_1  : aliased Test.Integer_Access := Foo (AGC_Temp_2);
         AGC_Dummy_1 : constant AGC.Empty_Type     :=
           AGC.Push_Root
             (AGC_Temp_1'Address, Test.AGC_Visit_Integer_Access'Address);
         AGC_Temp_0  : aliased Test.Integer_Access := Foo (AGC_Temp_1);
         AGC_Dummy_2 : constant AGC.Empty_Type     :=
           AGC.Push_Root
             (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
      begin
         return AGC_Ret : Test.Integer_Access := AGC_Temp_0 do
            AGC.Pop_Roots (AGC_Base_Root_Count);
         end return;
      end AGC_Func_1;
      function AGC_Func_0 return Test.Integer_Access is
         AGC_Base_Root_Count : constant Natural            := AGC.Root_Count;
         AGC_Temp_0 : aliased Test.Integer_Access := (raise Program_Error);
         AGC_Dummy_0         : constant AGC.Empty_Type     :=
           AGC.Push_Root
             (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
      begin
         return AGC_Ret : Test.Integer_Access := AGC_Temp_0 do
            AGC.Pop_Roots (AGC_Base_Root_Count);
         end return;
      end AGC_Func_0;
      AGC_Temp_1 : aliased Test.Integer_Access :=
        (if False then AGC_Func_0 else AGC_Func_1);
      AGC_Dummy_0 : constant AGC.Empty_Type :=
        AGC.Push_Root
          (AGC_Temp_1'Address, Test.AGC_Visit_Integer_Access'Address);
      AGC_Temp_0  : aliased Test.Integer_Access := Foo (AGC_Temp_1);
      AGC_Dummy_1 : constant AGC.Empty_Type     :=
        AGC.Push_Root
          (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
   begin
      return AGC_Ret : Integer_Access := new Integer'(Bar (AGC_Temp_0)) do
         AGC.Pop_Roots (AGC_Base_Root_Count);
      end return;
   end AGC_Func_0;
   X           : aliased Integer_Access  := AGC_Func_0;
   AGC_Dummy_0 : constant AGC.Empty_Type :=
     AGC.Push_Root (X'Address, Test.AGC_Visit_Integer_Access'Address);
begin
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
