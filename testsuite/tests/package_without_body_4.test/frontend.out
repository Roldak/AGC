with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   package Pkg is
      type Integer_Access is access Integer;
      for Integer_Access'Storage_Pool use AGC.Storage.Get.Pool;
      procedure AGC_Visit_Integer_Access (X : System.Address) with
         Inline;
      function AGC_Register_Integer_Access
        (X : Integer_Access) return Integer_Access with
         Inline;
      type Rec is record
         X : Integer_Access;
      end record;
      procedure AGC_Visit_Rec (X : System.Address) with
         Inline;
   end Pkg;
   package body Pkg is
      package AGC_Integer_Access_Ops_Implem is new AGC.Access_Type_Operations
        (Standard.Integer, Integer_Access, False, AGC.No_Op);
      procedure AGC_Visit_Integer_Access (X : System.Address) renames
        AGC_Integer_Access_Ops_Implem.Mark_And_Visit_Access_Type;
      function AGC_Register_Integer_Access
        (X : Integer_Access) return Integer_Access renames
        AGC_Integer_Access_Ops_Implem.Register;
      procedure AGC_Visit_Rec (X : System.Address) is
         pragma Suppress (All_Checks);
         type Rec_Access is access Rec with
            Storage_Size => 0;
         for Rec_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, Rec_Access);
         R : Rec renames Conv (X).all;
      begin
         Test.Pkg.AGC_Visit_Integer_Access (R.X'Address);
      end AGC_Visit_Rec;
   end Pkg;
begin
   null;
end Test;
