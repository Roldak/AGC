with GC;
with GC.Standard; use GC.Standard;
with Ada.Text_IO; use Ada.Text_IO;
procedure Test is
   AGC_Base_Root_Count : Natural := GC.Root_Count;
   type Integer_Access is access all Integer;
   function AGC_Register is new GC.Register (Integer_Access);
   function AGC_Temp is new GC.Temp (Integer_Access);
   function Inner (X : Integer) return Integer_Access is
      AGC_Base_Root_Count : Natural                := GC.Root_Count;
      Tmp                 : aliased Integer_Access :=
        AGC_Temp (0, AGC_Register (new Integer'(X)));
   begin
      GC.Untemp (0);
      GC.Push_Root (Tmp'Address);
      declare
         AGC_Root_Count : Natural := GC.Root_Count;
      begin
         return AGC_Ret : Integer_Access := Tmp do
            null;
            GC.Pop_Roots (AGC_Base_Root_Count);
         end return;
         GC.Pop_Roots (AGC_Root_Count);
      end;
      GC.Pop_Roots (AGC_Base_Root_Count);
   end Inner;
   function Add (A, B : Integer_Access) return Integer is
      AGC_Base_Root_Count : Natural := GC.Root_Count;
   begin
      return AGC_Ret : Integer := A.all + B.all do
         null;
         GC.Pop_Roots (AGC_Base_Root_Count);
      end return;
      GC.Pop_Roots (AGC_Base_Root_Count);
   end Add;
   A : Integer := Add (AGC_Temp (1, Inner (1)), AGC_Temp (1, Inner (2)));
begin
   GC.Untemp (1);
   declare
      AGC_Root_Count : Natural := GC.Root_Count;
   begin
      GC.Collect;
      GC.Pop_Roots (AGC_Root_Count);
   end;
   GC.Pop_Roots (AGC_Base_Root_Count);
end Test;
