with GC;
with GC.Standard; use GC.Standard;
with System;
with Ada.Unchecked_Conversion;
with Ada.Text_IO; use Ada.Text_IO;
procedure Test is
   AGC_Base_Root_Count : Natural := GC.Root_Count;
   type Integer_Access is access all Integer;
   function AGC_Register is new GC.Register (Integer_Access);
   procedure Visitor_Test_Integer_Access is new GC.Visit_Access_Type
     (Integer, Integer_Access, Visitor_Standard_Integer);
   function Inner (X : Integer) return Integer_Access is
      AGC_Base_Root_Count : Natural                := GC.Root_Count;
      Tmp : aliased Integer_Access := AGC_Register (new Integer'(X));
   begin
      GC.Push_Root (Tmp'Address, Visitor_Test_Integer_Access'Address);
      return AGC_Ret : Integer_Access := Tmp do
         GC.Pop_Roots (AGC_Base_Root_Count);
      end return;
      GC.Pop_Roots (AGC_Base_Root_Count);
   end Inner;
   function Add (A, B : Integer_Access) return Integer is
      AGC_Base_Root_Count : Natural := GC.Root_Count;
   begin
      return AGC_Ret : Integer := A.all + B.all do
         GC.Pop_Roots (AGC_Base_Root_Count);
      end return;
      GC.Pop_Roots (AGC_Base_Root_Count);
   end Add;
   function AGC_Func_0 return Integer is
      AGC_Base_Root_Count : Natural                     := GC.Root_Count;
      AGC_Temp_1          : aliased Test.Integer_Access := Inner (2);
   begin
      GC.Push_Root (AGC_Temp_1'Address, Visitor_Test_Integer_Access'Address);
      declare
         AGC_Root_Count : Natural                     := GC.Root_Count;
         AGC_Temp_0     : aliased Test.Integer_Access := Inner (1);
      begin
         GC.Push_Root
           (AGC_Temp_0'Address, Visitor_Test_Integer_Access'Address);
         return AGC_Ret : Integer := Add (AGC_Temp_0, AGC_Temp_1) do
            GC.Pop_Roots (AGC_Base_Root_Count);
         end return;
         GC.Pop_Roots (AGC_Root_Count);
      end;
      GC.Pop_Roots (AGC_Base_Root_Count);
   end AGC_Func_0;
   A : Integer := AGC_Func_0;
begin
   GC.Collect;
   GC.Pop_Roots (AGC_Base_Root_Count);
end Test;
