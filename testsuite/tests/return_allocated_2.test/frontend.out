with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with Ada.Text_IO; use Ada.Text_IO;
procedure Test is
   type Integer_Access is access Integer with
      Storage_Pool => AGC.Storage.Get.Pool;
   procedure AGC_Visit_Integer_Access (X : System.Address);
   procedure AGC_Visit_Integer_Access_Implem is new AGC.Visit_Access_Type
     (Standard.Integer, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Visit_Integer_Access_Implem;
   function Inner (X : Integer) return Integer_Access is
      AGC_Base_Root_Count : constant Natural        := AGC.Root_Count;
      Tmp                 : aliased Integer_Access  := new Integer'(X);
      AGC_Dummy_0         : constant AGC.Empty_Type :=
        AGC.Push_Root (Tmp'Address, Test.AGC_Visit_Integer_Access'Address);
   begin
      AGC.Pop_Roots (AGC_Base_Root_Count);
      return Tmp;
   end Inner;
   function Add (A, B : Integer_Access) return Integer is
   begin
      return AGC_Ret : Integer := A.all + B.all do
         null;
      end return;
   end Add;
   function AGC_Func_0 return Integer;
   function AGC_Func_0 return Integer is
      AGC_Base_Root_Count : constant Natural            := AGC.Root_Count;
      AGC_Temp_1          : aliased Test.Integer_Access := Inner (2);
      AGC_Dummy_0         : constant AGC.Empty_Type     :=
        AGC.Push_Root
          (AGC_Temp_1'Address, Test.AGC_Visit_Integer_Access'Address);
      AGC_Temp_0  : aliased Test.Integer_Access := Inner (1);
      AGC_Dummy_1 : constant AGC.Empty_Type     :=
        AGC.Push_Root
          (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
   begin
      return AGC_Ret : Integer := Add (AGC_Temp_0, AGC_Temp_1) do
         AGC.Pop_Roots (AGC_Base_Root_Count);
      end return;
   end AGC_Func_0;
   A : Integer := AGC_Func_0;
begin
   AGC.Collect;
end Test;
