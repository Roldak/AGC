with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with AGC;
with Ada.Containers.Vectors;

procedure Test is
   package Foo is
      type T is abstract tagged null record;

      procedure AGC_Visit_T (X : System.Address) with
         Inline;
      procedure AGC_Visit (X : access T) with
         Inline;
      procedure AGC_Visit_T_Classwide (X : System.Address) with
         Inline;
      type T_Access is access T'Class;
      for T_Access'Storage_Pool use AGC.Storage.Get.Pool;
      procedure AGC_Visit_T_Access (X : System.Address) with
         Inline;
      function AGC_Register_T_Access (X : T_Access) return T_Access with
         Inline;
   end Foo;

   package body Foo is
      procedure AGC_Visit_T (X : System.Address) is
         pragma Suppress (All_Checks);
         type Rec_Access is access T'Class with
            Storage_Size => 0;
         for Rec_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, Rec_Access);
         R : T'Class renames Conv (X).all;
      begin
         null;
      end AGC_Visit_T;
      procedure AGC_Visit (X : access T) is
      begin
         AGC_Visit_T (X.all'Address);
      end AGC_Visit;
      procedure AGC_Visit_T_Classwide (X : System.Address) is
         pragma Suppress (All_Checks);
         type T_Access is access T'Class with
            Storage_Size => 0;
         for T_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, T_Access);
      begin
         Conv (X).AGC_Visit;
      end AGC_Visit_T_Classwide;
      package AGC_T_Access_Ops_Implem is new AGC.Access_Type_Operations
        (Test.Foo.T'Class, T_Access, False, Test.Foo.AGC_Visit_T_Classwide);
      procedure AGC_Visit_T_Access (X : System.Address) renames
        AGC_T_Access_Ops_Implem.Mark_And_Visit_Access_Type;
      function AGC_Register_T_Access (X : T_Access) return T_Access renames
        AGC_T_Access_Ops_Implem.Register;
   end Foo;
   package Bar is
      package Int_Vectors is new Ada.Containers.Vectors (Positive, Integer);

      package AGC_Int_Vectors_Visitors is new AGC.Standard
        .Ada_Containers_Vectors_Visitors
        (Int_Vectors, AGC_Visit_Index_Type => AGC.No_Op,
         AGC_Visit_Element_Type            => AGC.No_Op);
      type U is new Foo.T with record
         V : Int_Vectors.Vector;
      end record;
      procedure AGC_Visit_U (X : System.Address) with
         Inline;
      overriding procedure AGC_Visit (X : access U) with
         Inline;
      procedure AGC_Visit_U_Classwide (X : System.Address) with
         Inline;
   end Bar;

   package body Bar is
      procedure AGC_Visit_U (X : System.Address) is
         pragma Suppress (All_Checks);
         type Rec_Access is access U'Class with
            Storage_Size => 0;
         for Rec_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, Rec_Access);
         R : U'Class renames Conv (X).all;
      begin
         Test.Foo.AGC_Visit_T (X);
      end AGC_Visit_U;
      overriding procedure AGC_Visit (X : access U) is
      begin
         AGC_Visit_U (X.all'Address);
      end AGC_Visit;
      procedure AGC_Visit_U_Classwide (X : System.Address) is
         pragma Suppress (All_Checks);
         type T_Access is access U'Class with
            Storage_Size => 0;
         for T_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, T_Access);
      begin
         Conv (X).AGC_Visit;
      end AGC_Visit_U_Classwide;
   end Bar;
   package Baz is
      type U is new Foo.T with record
         V : Integer := 2;
      end record;
      procedure AGC_Visit_U (X : System.Address) with
         Inline;
      overriding procedure AGC_Visit (X : access U) with
         Inline;
      procedure AGC_Visit_U_Classwide (X : System.Address) with
         Inline;
   end Baz;

   package body Baz is
      procedure AGC_Visit_U (X : System.Address) is
         pragma Suppress (All_Checks);
         type Rec_Access is access U'Class with
            Storage_Size => 0;
         for Rec_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, Rec_Access);
         R : U'Class renames Conv (X).all;
      begin
         Test.Foo.AGC_Visit_T (X);
      end AGC_Visit_U;
      overriding procedure AGC_Visit (X : access U) is
      begin
         AGC_Visit_U (X.all'Address);
      end AGC_Visit;
      procedure AGC_Visit_U_Classwide (X : System.Address) is
         pragma Suppress (All_Checks);
         type T_Access is access U'Class with
            Storage_Size => 0;
         for T_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, T_Access);
      begin
         Conv (X).AGC_Visit;
      end AGC_Visit_U_Classwide;
   end Baz;
   procedure Main is
      AGC_Base_Root_Count : constant Natural     := AGC.Root_Count;
      X                   : aliased Foo.T_Access :=
        Test.Foo.AGC_Register_T_Access (Test.Foo.T_Access'(new Bar.U));
      AGC_Dummy_0 : constant AGC.Empty_Type :=
        AGC.Push_Root (X'Address, Test.Foo.AGC_Visit_T_Access'Address);
   begin
      AGC.Pop_Roots (AGC_Base_Root_Count);
   end Main;
begin
   Main;
   AGC.Collect;
end Test;
