with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
package body Pkg is
   procedure AGC_Visit_T_Private (X : System.Address) renames Pkg.AGC_Visit_T;
   package AGC_Integer_Access_Ops_Implem is new AGC.Access_Type_Operations
     (Standard.Integer, Integer_Access, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Integer_Access_Ops_Implem.Mark_And_Visit_Access_Type;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access renames
     AGC_Integer_Access_Ops_Implem.Register;
   procedure AGC_Visit_T (X : System.Address) is
      pragma Suppress (All_Checks);
      type Rec_Access is access T'Class with
        Storage_Size => 0;
      for Rec_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion
        (System.Address, Rec_Access);
      R : T'Class renames Conv (X).all;
   begin
      Pkg.AGC_Visit_Integer_Access (R.X'Address);
   end AGC_Visit_T;
   procedure AGC_Visit (X : access T) is
   begin
      AGC_Visit_T (X.all'Address);
   end AGC_Visit;
   procedure AGC_Visit_T_Classwide (X : System.Address) is
      pragma Suppress (All_Checks);
      type T_Access is access T'Class with
        Storage_Size => 0;
      for T_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion (System.Address, T_Access);
   begin
      Conv (X).AGC_Visit;
   end AGC_Visit_T_Classwide;
   function Create (X : Integer) return T is
   begin
      return
        (X =>
           Pkg.AGC_Register_Integer_Access
             (Pkg.Integer_Access'(new Integer'(X))));
   end Create;

   function Get (X : T) return Integer is
   begin
      return X.X.all;
   end Get;
end Pkg;
with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
package Pkg is
   type T is private;

   procedure AGC_Visit_T_Private (X : System.Address) with
     Inline;
   function Create (X : Integer) return T;

   function Get (X : T) return Integer;

private
   type Integer_Access is access Integer;
   for Integer_Access'Storage_Pool use AGC.Storage.Get.Pool;
   procedure AGC_Visit_Integer_Access (X : System.Address) with
     Inline;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access with
     Inline;
   type T is tagged record
      X : Integer_Access;
   end record;
   procedure AGC_Visit_T (X : System.Address) with
     Inline;
   procedure AGC_Visit (X : access T) with
     Inline;
   procedure AGC_Visit_T_Classwide (X : System.Address) with
     Inline;
end Pkg;
with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with Ada.Text_IO; use Ada.Text_IO;
with Pkg;

procedure Test is
   AGC_Base_Root_Count : constant Natural        := AGC.Root_Count;
   X                   : aliased Pkg.T           := Pkg.Create (2);
   AGC_Dummy_0         : constant AGC.Empty_Type :=
     AGC.Push_Root (X'Address, Pkg.AGC_Visit_T_Private'Address);
begin
   AGC.Collect;
   Put_Line (Pkg.Get (X)'Image);
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
