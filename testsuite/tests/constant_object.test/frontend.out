with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   type Integer_Access is access all Integer with
      Storage_Pool => AGC.Storage.Get.Pool;
   procedure AGC_Visit_Integer_Access (X : System.Address);
   procedure AGC_Visit_Integer_Access_Implem is new AGC
     .Mark_And_Visit_Access_Type
     (Standard.Integer, True, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Visit_Integer_Access_Implem;
   X           : aliased Integer_Access  := new Integer'(2);
   AGC_Dummy_0 : constant AGC.Empty_Type :=
     AGC.Push_Root (X'Address, Test.AGC_Visit_Integer_Access'Address);
   Y           : aliased Integer_Access  := X;
   AGC_Dummy_1 : constant AGC.Empty_Type :=
     AGC.Push_Root (Y'Address, Test.AGC_Visit_Integer_Access'Address);
   Z : constant Integer_Access := Y;
begin
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
