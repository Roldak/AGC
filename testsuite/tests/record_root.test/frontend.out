with GC;
with GC.Standard; use GC.Standard;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   AGC_Base_Root_Count : Natural := GC.Root_Count;
   type Integer_Access is access all Integer;
   function AGC_Register is new GC.Register (Integer_Access);
   procedure Visitor_Test_Integer_Access is new GC.Visit_Access_Type
     (Integer, Integer_Access, Visitor_Standard_Integer);
   type Rec is record
      Value : Integer_Access;
   end record;
   function AGC_Register is new GC.Register (Rec);
   procedure Visitor_Test_Rec (X : System.Address);
   procedure Visitor_Test_Rec (X : System.Address) is
      pragma Suppress (Accessibility_Check);
      type Rec_Access is access all Rec;
      for Rec_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion
        (System.Address, Rec_Access);
      R : aliased Rec := Conv (X).all;
   begin
      null;
      declare
         C : aliased Test.Integer_Access := R.Value;
      begin
         Visitor_Test_Integer_Access (C'Address);
      end;
   end Visitor_Test_Rec;
   function AGC_Func_0 return Rec is
      AGC_Base_Root_Count : Natural                     := GC.Root_Count;
      AGC_Temp_0          : aliased Test.Integer_Access :=
        AGC_Register (new Integer'(2));
   begin
      GC.Push_Root (AGC_Temp_0'Address, Visitor_Test_Integer_Access'Address);
      return AGC_Ret : Rec := (Value => AGC_Temp_0) do
         GC.Pop_Roots (AGC_Base_Root_Count);
      end return;
      GC.Pop_Roots (AGC_Base_Root_Count);
   end AGC_Func_0;
   X : aliased Rec := AGC_Func_0;
begin
   GC.Push_Root (X'Address, Visitor_Test_Rec'Address);
   GC.Collect;
   X.Value.all := 3;
   GC.Pop_Roots (AGC_Base_Root_Count);
end Test;
