with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with System.Address_Image;
with Ada.Text_IO; use Ada.Text_IO;
procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   pragma Default_Storage_Pool (AGC.Storage.Get.Pool);
   type Integer_Access is access all Integer;
   procedure AGC_Visit_Integer_Access (X : System.Address);
   procedure AGC_Visit_Integer_Access_Implem is new AGC.Visit_Access_Type
     (Standard.Integer, Integer_Access, True, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Visit_Integer_Access_Implem;
   type Arr is array (1 .. 2) of aliased Integer;
   R           : aliased Arr             := (others => 0);
   A           : aliased Integer_Access  := R (2)'Unchecked_Access;
   AGC_Dummy_0 : constant AGC.Empty_Type :=
     AGC.Push_Root (A'Address, Test.AGC_Visit_Integer_Access'Address);
begin
   AGC.Collect;
   Put_Line (R (1)'Image);
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
