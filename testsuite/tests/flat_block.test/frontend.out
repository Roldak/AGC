with GC;
with GC.Standard; use GC.Standard;
procedure Test is
   AGC_Base_Root_Count : Natural := GC.Root_Count;
   type Integer_Access is access all Integer;
   function AGC_Register is new GC.Register (Integer_Access);
   function AGC_Temp is new GC.Temp (Integer_Access);
   X : aliased Integer_Access := AGC_Temp (0, AGC_Register (new Integer'(1)));
begin
   GC.Untemp (0);
   GC.Push_Root (X'Address);
   declare
      AGC_Root_Count : Natural                := GC.Root_Count;
      Y              : aliased Integer_Access :=
        AGC_Temp (1, AGC_Register (new Integer'(2)));
   begin
      GC.Untemp (1);
      GC.Push_Root (Y'Address);
      declare
         AGC_Root_Count : Natural                := GC.Root_Count;
         Z              : aliased Integer_Access :=
           AGC_Temp (2, AGC_Register (new Integer'(3)));
      begin
         GC.Untemp (2);
         GC.Push_Root (Z'Address);
         declare
            AGC_Root_Count : Natural                := GC.Root_Count;
            A              : aliased Integer_Access :=
              AGC_Temp (3, AGC_Register (new Integer'(4)));
         begin
            GC.Untemp (3);
            GC.Push_Root (A'Address);
            declare
               AGC_Root_Count : Natural                := GC.Root_Count;
               B              : aliased Integer_Access :=
                 AGC_Temp (4, AGC_Register (new Integer'(5)));
            begin
               GC.Untemp (4);
               GC.Push_Root (B'Address);
               declare
                  AGC_Root_Count : Natural                := GC.Root_Count;
                  C              : aliased Integer_Access :=
                    AGC_Temp (5, AGC_Register (new Integer'(6)));
               begin
                  GC.Untemp (5);
                  GC.Push_Root (C'Address);
                  null;
                  GC.Pop_Roots (AGC_Root_Count);
               end;
               GC.Pop_Roots (AGC_Root_Count);
            end;
            GC.Pop_Roots (AGC_Root_Count);
         end;
         GC.Pop_Roots (AGC_Root_Count);
      end;
      GC.Pop_Roots (AGC_Root_Count);
   end;
   GC.Pop_Roots (AGC_Base_Root_Count);
end Test;
