with GC;
with GC.Standard; use GC.Standard;
procedure Test is
   AGC_Base_Root_Count : Natural := GC.Root_Count;
   type Integer_Access is access all Integer;
   function AGC_Register is new GC.Register (Integer_Access);
   function AGC_Func_0 return Integer_Access is
      AGC_Base_Root_Count : Natural                     := GC.Root_Count;
      AGC_Temp_0          : aliased Test.Integer_Access :=
        AGC_Register (new Integer'(1));
   begin
      GC.Push_Root (AGC_Temp_0'Address);
      return AGC_Ret : Integer_Access := AGC_Temp_0 do
         null;
         GC.Pop_Roots (AGC_Base_Root_Count);
      end return;
      GC.Pop_Roots (AGC_Base_Root_Count);
   end AGC_Func_0;
   X : aliased Integer_Access := AGC_Func_0;
   function AGC_Func_1 return Integer_Access is
      AGC_Base_Root_Count : Natural                     := GC.Root_Count;
      AGC_Temp_0          : aliased Test.Integer_Access :=
        AGC_Register (new Integer'(2));
   begin
      GC.Push_Root (AGC_Temp_0'Address);
      return AGC_Ret : Integer_Access := AGC_Temp_0 do
         null;
         GC.Pop_Roots (AGC_Base_Root_Count);
      end return;
      GC.Pop_Roots (AGC_Base_Root_Count);
   end AGC_Func_1;
begin
   GC.Push_Root (X'Address);
   declare
      AGC_Root_Count : Natural                := GC.Root_Count;
      Y              : aliased Integer_Access := AGC_Func_1;
      function AGC_Func_2 return Integer_Access is
         AGC_Base_Root_Count : Natural                     := GC.Root_Count;
         AGC_Temp_0          : aliased Test.Integer_Access :=
           AGC_Register (new Integer'(3));
      begin
         GC.Push_Root (AGC_Temp_0'Address);
         return AGC_Ret : Integer_Access := AGC_Temp_0 do
            null;
            GC.Pop_Roots (AGC_Base_Root_Count);
         end return;
         GC.Pop_Roots (AGC_Base_Root_Count);
      end AGC_Func_2;
   begin
      GC.Push_Root (Y'Address);
      declare
         AGC_Root_Count : Natural                := GC.Root_Count;
         Z              : aliased Integer_Access := AGC_Func_2;
      begin
         GC.Push_Root (Z'Address);
         declare
            AGC_Root_Count : Natural := GC.Root_Count;
            function AGC_Func_0 return Integer_Access is
               AGC_Base_Root_Count : Natural := GC.Root_Count;
               AGC_Temp_0          : aliased Test.Integer_Access :=
                 AGC_Register (new Integer'(4));
            begin
               GC.Push_Root (AGC_Temp_0'Address);
               return AGC_Ret : Integer_Access := AGC_Temp_0 do
                  null;
                  GC.Pop_Roots (AGC_Base_Root_Count);
               end return;
               GC.Pop_Roots (AGC_Base_Root_Count);
            end AGC_Func_0;
            A : aliased Integer_Access := AGC_Func_0;
            function AGC_Func_1 return Integer_Access is
               AGC_Base_Root_Count : Natural := GC.Root_Count;
               AGC_Temp_0          : aliased Test.Integer_Access :=
                 AGC_Register (new Integer'(5));
            begin
               GC.Push_Root (AGC_Temp_0'Address);
               return AGC_Ret : Integer_Access := AGC_Temp_0 do
                  null;
                  GC.Pop_Roots (AGC_Base_Root_Count);
               end return;
               GC.Pop_Roots (AGC_Base_Root_Count);
            end AGC_Func_1;
         begin
            GC.Push_Root (A'Address);
            declare
               AGC_Root_Count : Natural                := GC.Root_Count;
               B              : aliased Integer_Access := AGC_Func_1;
               function AGC_Func_2 return Integer_Access is
                  AGC_Base_Root_Count : Natural := GC.Root_Count;
                  AGC_Temp_0          : aliased Test.Integer_Access :=
                    AGC_Register (new Integer'(6));
               begin
                  GC.Push_Root (AGC_Temp_0'Address);
                  return AGC_Ret : Integer_Access := AGC_Temp_0 do
                     null;
                     GC.Pop_Roots (AGC_Base_Root_Count);
                  end return;
                  GC.Pop_Roots (AGC_Base_Root_Count);
               end AGC_Func_2;
            begin
               GC.Push_Root (B'Address);
               declare
                  AGC_Root_Count : Natural                := GC.Root_Count;
                  C              : aliased Integer_Access := AGC_Func_2;
               begin
                  GC.Push_Root (C'Address);
                  null;
                  GC.Pop_Roots (AGC_Root_Count);
               end;
               GC.Pop_Roots (AGC_Root_Count);
            end;
            GC.Pop_Roots (AGC_Root_Count);
         end;
         GC.Pop_Roots (AGC_Root_Count);
      end;
      GC.Pop_Roots (AGC_Root_Count);
   end;
   GC.Pop_Roots (AGC_Base_Root_Count);
end Test;
