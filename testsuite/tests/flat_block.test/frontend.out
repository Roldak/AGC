with GC;
with GC.Standard; use GC.Standard;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   AGC_Base_Root_Count : Natural := GC.Root_Count;
   type Integer_Access is access all Integer;
   function AGC_Register is new GC.Register (Integer_Access);
   procedure Visitor_Test_Integer_Access is new GC.Visit_Access_Type
     (Integer, Integer_Access, Visitor_Standard_Integer);
   X : aliased Integer_Access := AGC_Register (new Integer'(1));
begin
   GC.Push_Root (X'Address, Visitor_Test_Integer_Access'Address);
   declare
      AGC_Root_Count : Natural                := GC.Root_Count;
      Y : aliased Integer_Access := AGC_Register (new Integer'(2));
   begin
      GC.Push_Root (Y'Address, Visitor_Test_Integer_Access'Address);
      declare
         AGC_Root_Count : Natural                := GC.Root_Count;
         Z : aliased Integer_Access := AGC_Register (new Integer'(3));
      begin
         GC.Push_Root (Z'Address, Visitor_Test_Integer_Access'Address);
         declare
            AGC_Root_Count : Natural                := GC.Root_Count;
            A : aliased Integer_Access := AGC_Register (new Integer'(4));
         begin
            GC.Push_Root (A'Address, Visitor_Test_Integer_Access'Address);
            declare
               AGC_Root_Count : Natural                := GC.Root_Count;
               B : aliased Integer_Access := AGC_Register (new Integer'(5));
            begin
               GC.Push_Root (B'Address, Visitor_Test_Integer_Access'Address);
               declare
                  AGC_Root_Count : Natural                := GC.Root_Count;
                  C : aliased Integer_Access := AGC_Register (new Integer'(6));
               begin
                  GC.Push_Root
                    (C'Address, Visitor_Test_Integer_Access'Address);
                  null;
                  GC.Pop_Roots (AGC_Root_Count);
               end;
               GC.Pop_Roots (AGC_Root_Count);
            end;
            GC.Pop_Roots (AGC_Root_Count);
         end;
         GC.Pop_Roots (AGC_Root_Count);
      end;
      GC.Pop_Roots (AGC_Root_Count);
   end;
   GC.Pop_Roots (AGC_Base_Root_Count);
end Test;
