with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with Ada.Text_IO; use Ada.Text_IO;
with Pkg;
procedure Main is
   AGC_Base_Root_Count : constant Natural        := AGC.Root_Count;
   X                   : aliased Pkg.T_Access    := Pkg.Create (3);
   AGC_Dummy_0         : constant AGC.Empty_Type :=
     AGC.Push_Root (X'Address, Pkg.AGC_Visit_T_Access'Address);
begin
   Put_Line (X.all'Image);
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Main;
with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
package body Pkg is
   procedure AGC_Visit_T_Access_Implem is new AGC.Visit_Access_Type
     (Pkg.T, False, AGC.No_Op);
   procedure AGC_Visit_T_Access (X : System.Address) renames
     AGC_Visit_T_Access_Implem;
   function Create (X : Integer) return T_Access is
   begin
      return AGC_Ret : T_Access := new T'(T (X)) do
         null;
      end return;
   end Create;
end Pkg;
with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
package Pkg is
   type T is new Integer;
   type T_Access is access T with
      Storage_Pool => AGC.Storage.Get.Pool;
   procedure AGC_Visit_T_Access (X : System.Address);
   function Create (X : Integer) return T_Access;
end Pkg;
