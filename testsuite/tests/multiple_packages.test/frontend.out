with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with Ada.Text_IO; use Ada.Text_IO;
procedure Test is
   AGC_Base_Root_Count : Natural := AGC.Root_Count;
   pragma Default_Storage_Pool (AGC.Storage.Get.Pool);
   package Pkg is
      type T is new Integer;
      type T_Access is access T;
      procedure AGC_Visit_T_Access is new AGC.Visit_Access_Type
        (Test.Pkg.T, T_Access, False, AGC.No_Op);
      function Create (X : Integer) return T_Access;
   end Pkg;
   package body Pkg is
      function Create (X : Integer) return T_Access is
         AGC_Base_Root_Count : Natural := AGC.Root_Count;
      begin
         return AGC_Ret : T_Access := new T'(T (X)) do
            AGC.Pop_Roots (AGC_Base_Root_Count);
         end return;
      end Create;
   end Pkg;
   package Outer is
      package Inner is
         type Rec is record
            X : Pkg.T_Access;
         end record;
         procedure AGC_Visit_Rec (X : System.Address);
         procedure Foo (X : Rec);
      end Inner;
   end Outer;
   package body Outer is
      package body Inner is
         procedure AGC_Visit_Rec (X : System.Address) is
            pragma Suppress (Accessibility_Check);
            type Rec_Access is access all Rec;
            for Rec_Access'Size use Standard'Address_Size;
            function Conv is new Ada.Unchecked_Conversion
              (System.Address, Rec_Access);
            R : aliased Rec := Conv (X).all;
         begin
            declare
               C : aliased Test.Pkg.T_Access := R.X;
            begin
               Test.Pkg.AGC_Visit_T_Access (C'Address);
            end;
         end AGC_Visit_Rec;
         procedure Foo (X : Rec) is
            AGC_Base_Root_Count : Natural              := AGC.Root_Count;
            V                   : aliased Pkg.T_Access := X.X;
         begin
            AGC.Push_Root (V'Address, Test.Pkg.AGC_Visit_T_Access'Address);
            Put_Line (V.all'Image);
            AGC.Pop_Roots (AGC_Base_Root_Count);
         end Foo;
      end Inner;
   end Outer;
begin
   declare
      AGC_Temp_1 : aliased Test.Pkg.T_Access := Pkg.Create (2);
   begin
      AGC.Push_Root (AGC_Temp_1'Address, Test.Pkg.AGC_Visit_T_Access'Address);
      declare
         AGC_Temp_0 : aliased Test.Outer.Inner.Rec := (X => AGC_Temp_1);
      begin
         AGC.Push_Root
           (AGC_Temp_0'Address, Test.Outer.Inner.AGC_Visit_Rec'Address);
         Outer.Inner.Foo (AGC_Temp_0);
      end;
   end;
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
