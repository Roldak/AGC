with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with Ada.Text_IO; use Ada.Text_IO;

procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   package Pkg is
      type T is new Integer;
      type T_Access is access T;

      for T_Access'Storage_Pool use AGC.Storage.Get.Pool;
      procedure AGC_Visit_T_Access (X : System.Address) with
         Inline;
      function AGC_Register_T_Access (X : T_Access) return T_Access with
         Inline;
      function Create (X : Integer) return T_Access;
   end Pkg;

   package body Pkg is
      package AGC_T_Access_Ops_Implem is new AGC.Access_Type_Operations
        (Test.Pkg.T, T_Access, False, AGC.No_Op);
      procedure AGC_Visit_T_Access (X : System.Address) renames
        AGC_T_Access_Ops_Implem.Mark_And_Visit_Access_Type;
      function AGC_Register_T_Access (X : T_Access) return T_Access renames
        AGC_T_Access_Ops_Implem.Register;
      function Create (X : Integer) return T_Access is
      begin
         return
           AGC_Ret : T_Access :=
             Test.Pkg.AGC_Register_T_Access (Test.Pkg.T_Access'(new T'(T (X))))
         do
            null;
         end return;
      end Create;
   end Pkg;

   package Outer is
      package Inner is
         type Rec is record
            X : Pkg.T_Access;
         end record;

         procedure AGC_Visit_Rec (X : System.Address) with
            Inline;
         procedure Foo (X : Rec);
      end Inner;
   end Outer;

   package body Outer is
      package body Inner is
         procedure AGC_Visit_Rec (X : System.Address) is
            pragma Suppress (All_Checks);
            type Rec_Access is access Rec with
               Storage_Size => 0;
            for Rec_Access'Size use Standard'Address_Size;
            function Conv is new Ada.Unchecked_Conversion
              (System.Address, Rec_Access);
            R : Rec renames Conv (X).all;
         begin
            Test.Pkg.AGC_Visit_T_Access (R.X'Address);
         end AGC_Visit_Rec;
         procedure Foo (X : Rec) is
            AGC_Base_Root_Count : constant Natural        := AGC.Root_Count;
            V                   : aliased Pkg.T_Access    := X.X;
            AGC_Dummy_0         : constant AGC.Empty_Type :=
              AGC.Push_Root (V'Address, Test.Pkg.AGC_Visit_T_Access'Address);
         begin
            Put_Line (V.all'Image);
            AGC.Pop_Roots (AGC_Base_Root_Count);
         end Foo;
      end Inner;
   end Outer;
begin
   declare
      AGC_Temp_0  : aliased Test.Pkg.T_Access := Pkg.Create (2);
      AGC_Dummy_0 : constant AGC.Empty_Type   :=
        AGC.Push_Root
          (AGC_Temp_0'Address, Test.Pkg.AGC_Visit_T_Access'Address);
   begin
      Outer.Inner.Foo ((X => AGC_Temp_0));
   end;
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
