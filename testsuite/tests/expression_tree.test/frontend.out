with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with Ada.Text_IO; use Ada.Text_IO;
procedure Test is
   pragma Default_Storage_Pool (AGC.Storage.Get.Pool);
   type Expr_Kind is (Add, Mul, Lit, Var);
   type Expr;
   type Expr_Access is access Expr;
   type Expr (K : Expr_Kind) is record
      case K is
         when Add | Mul =>
            Lhs : Expr_Access;
            Rhs : Expr_Access;
         when Lit =>
            Value : Integer;
         when Var =>
            Name : Character;
      end case;
   end record;
   procedure AGC_Visit_Expr (X : System.Address);
   procedure AGC_Visit_Expr_Access (X : System.Address);
   procedure AGC_Visit_Expr_Access_Implem is new AGC.Visit_Access_Type
     (Test.Expr, Expr_Access, False, Test.AGC_Visit_Expr);
   procedure AGC_Visit_Expr_Access (X : System.Address) renames
     AGC_Visit_Expr_Access_Implem;
   procedure AGC_Visit_Expr (X : System.Address) is
      pragma Suppress (Accessibility_Check);
      type Rec_Access is access all Expr;
      for Rec_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion
        (System.Address, Rec_Access);
      R : Expr renames Conv (X).all;
   begin
      case R.K is
         when Add | Mul =>
            declare
               C : aliased Test.Expr_Access := R.Lhs;
            begin
               Test.AGC_Visit_Expr_Access (C'Address);
            end;
            declare
               C : aliased Test.Expr_Access := R.Rhs;
            begin
               Test.AGC_Visit_Expr_Access (C'Address);
            end;
         when Lit =>
            null;
         when Var =>
            null;
      end case;
   end AGC_Visit_Expr;
   type Env is array (Character) of Integer;
   function Is_Lit (Ex : Expr_Access; V : Integer) return Boolean is
   begin
      return AGC_Ret : Boolean := Ex.K = Lit and then Ex.Value = V do
         null;
      end return;
   end Is_Lit;
   function Simplify (Ex : Expr_Access) return Expr_Access is
      AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   begin
      case Ex.K is
         when Add =>
            if Is_Lit (Ex.Lhs, 0) then
               return AGC_Ret : Expr_Access := Simplify (Ex.Rhs) do
                  null;
               end return;
            elsif Is_Lit (Ex.Rhs, 0) then
               return AGC_Ret : Expr_Access := Simplify (Ex.Lhs) do
                  null;
               end return;
            elsif Ex.Lhs.K = Lit and Ex.Rhs.K = Lit then
               return
                 AGC_Ret : Expr_Access :=
                   new Expr'(Lit, Ex.Lhs.Value + Ex.Rhs.Value) do
                  null;
               end return;
            else
               declare
                  AGC_Temp_1  : aliased Test.Expr_Access := Simplify (Ex.Rhs);
                  AGC_Dummy_0 : constant AGC.Empty_Type  :=
                    AGC.Push_Root
                      (AGC_Temp_1'Address, Test.AGC_Visit_Expr_Access'Address);
                  AGC_Temp_0  : aliased Test.Expr_Access := Simplify (Ex.Lhs);
                  AGC_Dummy_1 : constant AGC.Empty_Type  :=
                    AGC.Push_Root
                      (AGC_Temp_0'Address, Test.AGC_Visit_Expr_Access'Address);
               begin
                  return
                    AGC_Ret : Expr_Access :=
                      new Expr'(Add, AGC_Temp_0, AGC_Temp_1) do
                     AGC.Pop_Roots (AGC_Base_Root_Count);
                  end return;
               end;
            end if;
         when Mul =>
            if Is_Lit (Ex.Lhs, 0) or else Is_Lit (Ex.Rhs, 0) then
               return AGC_Ret : Expr_Access := new Expr'(Lit, 0) do
                  AGC.Pop_Roots (AGC_Base_Root_Count);
               end return;
            elsif Is_Lit (Ex.Lhs, 1) then
               return AGC_Ret : Expr_Access := Simplify (Ex.Rhs) do
                  AGC.Pop_Roots (AGC_Base_Root_Count);
               end return;
            elsif Is_Lit (Ex.Rhs, 1) then
               return AGC_Ret : Expr_Access := Simplify (Ex.Lhs) do
                  AGC.Pop_Roots (AGC_Base_Root_Count);
               end return;
            elsif Ex.Lhs.K = Lit and Ex.Rhs.K = Lit then
               return
                 AGC_Ret : Expr_Access :=
                   new Expr'(Lit, Ex.Lhs.Value * Ex.Rhs.Value) do
                  AGC.Pop_Roots (AGC_Base_Root_Count);
               end return;
            else
               declare
                  AGC_Temp_1  : aliased Test.Expr_Access := Simplify (Ex.Rhs);
                  AGC_Dummy_2 : constant AGC.Empty_Type  :=
                    AGC.Push_Root
                      (AGC_Temp_1'Address, Test.AGC_Visit_Expr_Access'Address);
                  AGC_Temp_0  : aliased Test.Expr_Access := Simplify (Ex.Lhs);
                  AGC_Dummy_3 : constant AGC.Empty_Type  :=
                    AGC.Push_Root
                      (AGC_Temp_0'Address, Test.AGC_Visit_Expr_Access'Address);
               begin
                  return
                    AGC_Ret : Expr_Access :=
                      new Expr'(Mul, AGC_Temp_0, AGC_Temp_1) do
                     AGC.Pop_Roots (AGC_Base_Root_Count);
                  end return;
               end;
            end if;
         when Lit =>
            AGC.Pop_Roots (AGC_Base_Root_Count);
            return Ex;
         when Var =>
            AGC.Pop_Roots (AGC_Base_Root_Count);
            return Ex;
      end case;
   end Simplify;
   function Substitute (Ex : Expr_Access; Ev : Env) return Expr_Access is
      AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   begin
      case Ex.K is
         when Add =>
            declare
               AGC_Temp_1 : aliased Test.Expr_Access :=
                 Substitute (Ex.Rhs, Ev);
               AGC_Dummy_0 : constant AGC.Empty_Type :=
                 AGC.Push_Root
                   (AGC_Temp_1'Address, Test.AGC_Visit_Expr_Access'Address);
               AGC_Temp_0 : aliased Test.Expr_Access :=
                 Substitute (Ex.Lhs, Ev);
               AGC_Dummy_1 : constant AGC.Empty_Type :=
                 AGC.Push_Root
                   (AGC_Temp_0'Address, Test.AGC_Visit_Expr_Access'Address);
            begin
               return
                 AGC_Ret : Expr_Access :=
                   new Expr'(Add, AGC_Temp_0, AGC_Temp_1) do
                  AGC.Pop_Roots (AGC_Base_Root_Count);
               end return;
            end;
         when Mul =>
            declare
               AGC_Temp_1 : aliased Test.Expr_Access :=
                 Substitute (Ex.Rhs, Ev);
               AGC_Dummy_2 : constant AGC.Empty_Type :=
                 AGC.Push_Root
                   (AGC_Temp_1'Address, Test.AGC_Visit_Expr_Access'Address);
               AGC_Temp_0 : aliased Test.Expr_Access :=
                 Substitute (Ex.Lhs, Ev);
               AGC_Dummy_3 : constant AGC.Empty_Type :=
                 AGC.Push_Root
                   (AGC_Temp_0'Address, Test.AGC_Visit_Expr_Access'Address);
            begin
               return
                 AGC_Ret : Expr_Access :=
                   new Expr'(Mul, AGC_Temp_0, AGC_Temp_1) do
                  AGC.Pop_Roots (AGC_Base_Root_Count);
               end return;
            end;
         when Lit =>
            AGC.Pop_Roots (AGC_Base_Root_Count);
            return Ex;
         when Var =>
            return AGC_Ret : Expr_Access := new Expr'(Lit, Ev (Ex.Name)) do
               AGC.Pop_Roots (AGC_Base_Root_Count);
            end return;
      end case;
   end Substitute;
   function Evaluate (Ex : Expr_Access; Ev : Env) return Integer is
      AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
      function AGC_Func_0 return Expr_Access is
         AGC_Base_Root_Count : constant Natural         := AGC.Root_Count;
         AGC_Temp_0          : aliased Test.Expr_Access := Substitute (Ex, Ev);
         AGC_Dummy_0         : constant AGC.Empty_Type  :=
           AGC.Push_Root
             (AGC_Temp_0'Address, Test.AGC_Visit_Expr_Access'Address);
      begin
         return AGC_Ret : Expr_Access := Simplify (AGC_Temp_0) do
            AGC.Pop_Roots (AGC_Base_Root_Count);
         end return;
      end AGC_Func_0;
      Simplified  : aliased Expr_Access     := AGC_Func_0;
      AGC_Dummy_0 : constant AGC.Empty_Type :=
        AGC.Push_Root (Simplified'Address, Test.AGC_Visit_Expr_Access'Address);
   begin
      if Simplified.K = Lit then
         AGC.Pop_Roots (AGC_Base_Root_Count);
         return Simplified.Value;
      else
         return AGC_Ret : Integer := Evaluate (Simplified, Ev) do
            AGC.Pop_Roots (AGC_Base_Root_Count);
         end return;
      end if;
   end Evaluate;
   function To_String (Ex : Expr_Access) return String is
   begin
      return
        AGC_Ret : String :=
          (case Ex.K is
             when Add =>
               "(" & To_String (Ex.Lhs) & " + " & To_String (Ex.Rhs) & ")",
             when Mul =>
               "(" & To_String (Ex.Lhs) & " * " & To_String (Ex.Rhs) & ")",
             when Lit => Ex.Value'Image, when Var => Ex.Name'Image)
      do
         null;
      end return;
   end To_String;
   procedure Main is
      AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
      function AGC_Func_0 return Expr_Access is
         AGC_Base_Root_Count : constant Natural         := AGC.Root_Count;
         AGC_Temp_3          : aliased Test.Expr_Access := new Expr'(Lit, 1);
         AGC_Dummy_0         : constant AGC.Empty_Type  :=
           AGC.Push_Root
             (AGC_Temp_3'Address, Test.AGC_Visit_Expr_Access'Address);
         AGC_Temp_2  : aliased Test.Expr_Access := new Expr'(Var, 'x');
         AGC_Dummy_1 : constant AGC.Empty_Type  :=
           AGC.Push_Root
             (AGC_Temp_2'Address, Test.AGC_Visit_Expr_Access'Address);
         AGC_Temp_1 : aliased Test.Expr_Access :=
           new Expr'(Mul, AGC_Temp_2, AGC_Temp_3);
         AGC_Dummy_2 : constant AGC.Empty_Type :=
           AGC.Push_Root
             (AGC_Temp_1'Address, Test.AGC_Visit_Expr_Access'Address);
         AGC_Temp_0  : aliased Test.Expr_Access := new Expr'(Lit, 0);
         AGC_Dummy_3 : constant AGC.Empty_Type  :=
           AGC.Push_Root
             (AGC_Temp_0'Address, Test.AGC_Visit_Expr_Access'Address);
      begin
         return
           AGC_Ret : Expr_Access := new Expr'(Add, AGC_Temp_0, AGC_Temp_1) do
            AGC.Pop_Roots (AGC_Base_Root_Count);
         end return;
      end AGC_Func_0;
      X           : aliased Expr_Access     := AGC_Func_0;
      AGC_Dummy_0 : constant AGC.Empty_Type :=
        AGC.Push_Root (X'Address, Test.AGC_Visit_Expr_Access'Address);
      function AGC_Func_1 return Expr_Access is
         AGC_Base_Root_Count : constant Natural         := AGC.Root_Count;
         AGC_Temp_1          : aliased Test.Expr_Access := new Expr'(Lit, 4);
         AGC_Dummy_0         : constant AGC.Empty_Type  :=
           AGC.Push_Root
             (AGC_Temp_1'Address, Test.AGC_Visit_Expr_Access'Address);
         AGC_Temp_0  : aliased Test.Expr_Access := new Expr'(Lit, 2);
         AGC_Dummy_1 : constant AGC.Empty_Type  :=
           AGC.Push_Root
             (AGC_Temp_0'Address, Test.AGC_Visit_Expr_Access'Address);
      begin
         return
           AGC_Ret : Expr_Access := new Expr'(Mul, AGC_Temp_0, AGC_Temp_1) do
            AGC.Pop_Roots (AGC_Base_Root_Count);
         end return;
      end AGC_Func_1;
      Y           : aliased Expr_Access     := AGC_Func_1;
      AGC_Dummy_1 : constant AGC.Empty_Type :=
        AGC.Push_Root (Y'Address, Test.AGC_Visit_Expr_Access'Address);
      Z           : aliased Expr_Access     := new Expr'(Add, X, Y);
      AGC_Dummy_2 : constant AGC.Empty_Type :=
        AGC.Push_Root (Z'Address, Test.AGC_Visit_Expr_Access'Address);
      Ev : Env := ('x' => 42, others => 0);
   begin
      Put_Line (To_String (Z));
      declare
         AGC_Root_Count : constant Natural         := AGC.Root_Count;
         AGC_Temp_0     : aliased Test.Expr_Access := Simplify (Z);
         AGC_Dummy_3    : constant AGC.Empty_Type  :=
           AGC.Push_Root
             (AGC_Temp_0'Address, Test.AGC_Visit_Expr_Access'Address);
      begin
         Put_Line (To_String (AGC_Temp_0));
         AGC.Pop_Roots (AGC_Root_Count);
      end;
      declare
         AGC_Root_Count : constant Natural         := AGC.Root_Count;
         AGC_Temp_0     : aliased Test.Expr_Access := Substitute (Z, Ev);
         AGC_Dummy_4    : constant AGC.Empty_Type  :=
           AGC.Push_Root
             (AGC_Temp_0'Address, Test.AGC_Visit_Expr_Access'Address);
      begin
         Put_Line (To_String (AGC_Temp_0));
         AGC.Pop_Roots (AGC_Root_Count);
      end;
      Put_Line (Evaluate (Z, Ev)'Image);
      AGC.Pop_Roots (AGC_Base_Root_Count);
   end Main;
begin
   Main;
   AGC.Collect;
end Test;
