with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   type Integer_Access is access Integer;

   for Integer_Access'Storage_Pool use AGC.Storage.Get.Pool;
   procedure AGC_Visit_Integer_Access (X : System.Address) with
     Inline;
   package AGC_Integer_Access_Ops_Implem is new AGC.Access_Type_Operations
     (Standard.Integer, Integer_Access, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Integer_Access_Ops_Implem.Mark_And_Visit_Access_Type;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access with
     Inline;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access renames
     AGC_Integer_Access_Ops_Implem.Register;
   type Kind is (A, B, C);

   type Rec (K : Kind) is record
      X : Integer;
      case K is
         when A =>
            null;
         when B =>
            Y : Integer;
         when C =>
            Z : Integer_Access;
      end case;
   end record;

   procedure AGC_Visit_Rec (X : System.Address) with
     Inline;
   procedure AGC_Visit_Rec (X : System.Address) is
      pragma Suppress (All_Checks);
      type Rec_Access is access Rec with
        Storage_Size => 0;
      for Rec_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion
        (System.Address, Rec_Access);
      R : Rec renames Conv (X).all;
   begin
      case R.K is
         when A =>
            null;
         when B =>
            null;
         when C =>
            Test.AGC_Visit_Integer_Access (R.Z'Address);
      end case;
   end AGC_Visit_Rec;
   R_1         : aliased Rec             := (A, 1);
   AGC_Dummy_0 : constant AGC.Empty_Type :=
     AGC.Push_Root (R_1'Address, Test.AGC_Visit_Rec'Address);
   function AGC_Func_0 return Rec;
   function AGC_Func_0 return Rec is
      AGC_Base_Root_Count : constant Natural            := AGC.Root_Count;
      AGC_Temp_0          : aliased Test.Integer_Access :=
        Test.AGC_Register_Integer_Access
          (Test.Integer_Access'(new Integer'(3)));
      AGC_Dummy_0         : constant AGC.Empty_Type     :=
        AGC.Push_Root
          (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
   begin
      return AGC_Ret : Rec := (C, 2, AGC_Temp_0) do
         AGC.Pop_Roots (AGC_Base_Root_Count);
      end return;
   end AGC_Func_0;
   R_2         : aliased Rec             := AGC_Func_0;
   AGC_Dummy_1 : constant AGC.Empty_Type :=
     AGC.Push_Root (R_2'Address, Test.AGC_Visit_Rec'Address);
begin
   AGC.Collect;
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
