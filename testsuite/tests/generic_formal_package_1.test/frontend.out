with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   generic
      type T is private;
      with procedure AGC_Visit_T_Private (X : System.Address);
   package Pkg is
      function Get return T;
   end Pkg;

   package body Pkg is
      function Get return T is
         AGC_Base_Root_Count : constant Natural        := AGC.Root_Count;
         R                   : aliased T;
         AGC_Dummy_0         : constant AGC.Empty_Type :=
           AGC.Push_Root (R'Address, Test.Pkg.AGC_Visit_T_Private'Address);
      begin
         AGC.Pop_Roots (AGC_Base_Root_Count);
         return R;
      end Get;
   end Pkg;

   generic
      with package P is new Pkg (<>);
   package G is
      procedure Foo;
   end G;

   package body G is
      procedure Foo is
         AGC_Base_Root_Count : constant Natural        := AGC.Root_Count;
         X                   : aliased P.T             := P.Get;
         AGC_Dummy_0         : constant AGC.Empty_Type :=
           AGC.Push_Root (X'Address, Test.G.P.AGC_Visit_T_Private'Address);
      begin
         AGC.Pop_Roots (AGC_Base_Root_Count);
      end Foo;
   end G;

   package Pkg_I is new Pkg (Integer, AGC_Visit_T_Private => AGC.No_Op);
   package G_I is new G (Pkg_I);
begin
   G_I.Foo;
end Test;
