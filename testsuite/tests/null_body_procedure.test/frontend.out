with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   type Integer_Access is access Integer with
      Storage_Pool => AGC.Storage.Get.Pool;
   procedure AGC_Visit_Integer_Access (X : System.Address);
   procedure AGC_Visit_Integer_Access_Implem is new AGC
     .Mark_And_Visit_Access_Type
     (Standard.Integer, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Visit_Integer_Access_Implem;
   package Pkg is
      type T is record
         X : Integer_Access;
      end record;
      procedure AGC_Visit_T (X : System.Address);
      procedure Foo (X : T) is null;
   end Pkg;
   package body Pkg is
      procedure AGC_Visit_T (X : System.Address) is
         pragma Suppress (Accessibility_Check);
         type Rec_Access is access all T;
         for Rec_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, Rec_Access);
         R : T renames Conv (X).all;
      begin
         declare
            C : aliased Test.Integer_Access := R.X;
         begin
            Test.AGC_Visit_Integer_Access (C'Address);
         end;
      end AGC_Visit_T;
   end Pkg;
   procedure Bar (X : Integer_Access) is null;
begin
   null;
end Test;
