with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   Error : exception;
   type Integer_Access is access Integer with
      Storage_Pool => AGC.Storage.Get.Pool;
   procedure AGC_Visit_Integer_Access (X : System.Address);
   procedure AGC_Visit_Integer_Access_Implem is new AGC
     .Mark_And_Visit_Access_Type
     (Standard.Integer, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Visit_Integer_Access_Implem;
   procedure Foo is
      AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   begin
      declare
         X           : aliased Integer_Access  := new Integer'(2);
         AGC_Dummy_0 : constant AGC.Empty_Type :=
           AGC.Push_Root (X'Address, Test.AGC_Visit_Integer_Access'Address);
      begin
         raise Error;
      end;
      AGC.Pop_Roots (AGC_Base_Root_Count);
   exception
      when Error =>
         AGC.Pop_Roots (AGC_Base_Root_Count);
   end Foo;
begin
   Foo;
   AGC.Collect;
end Test;
