with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with Q;

package body P is
   package AGC_U_Access_Ops_Implem is new AGC.Access_Type_Operations
     (Q.U, U_Access, False, Q.AGC_Visit_U);
   procedure AGC_Visit_U_Access (X : System.Address) renames
     AGC_U_Access_Ops_Implem.Mark_And_Visit_Access_Type;
   function AGC_Register_U_Access (X : U_Access) return U_Access renames
     AGC_U_Access_Ops_Implem.Register;
   procedure AGC_Visit_Rec (X : System.Address) is
      pragma Suppress (All_Checks);
      type Rec_Access is access Rec with
         Storage_Size => 0;
      for Rec_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion
        (System.Address, Rec_Access);
      R : Rec renames Conv (X).all;
   begin
      P.AGC_Visit_U_Access (R.X'Address);
   end AGC_Visit_Rec;
   procedure Bar (X : Rec) is
   begin
      null;
   end Bar;
end P;
with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
limited with Q;

package P is
   type U_Access is access Q.U;

   for U_Access'Storage_Pool use AGC.Storage.Get.Pool;
   procedure AGC_Visit_U_Access (X : System.Address) with
      Inline;
   function AGC_Register_U_Access (X : U_Access) return U_Access with
      Inline;
   type Rec is record
      X : U_Access;
   end record;

   procedure AGC_Visit_Rec (X : System.Address) with
      Inline;
   procedure Bar (X : Rec);
end P;
with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
package body Q is
   procedure AGC_Visit_U (X : System.Address) is
      pragma Suppress (All_Checks);
      type Rec_Access is access U with
         Storage_Size => 0;
      for Rec_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion
        (System.Address, Rec_Access);
      R : U renames Conv (X).all;
   begin
      P.AGC_Visit_Rec (R.Y'Address);
   end AGC_Visit_U;
   procedure Foo (X : U) is
   begin
      null;
   end Foo;
end Q;
with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with P;

package Q is
   type U is record
      Y : P.Rec;
   end record;

   procedure AGC_Visit_U (X : System.Address) with
      Inline;
   procedure Foo (X : U);
end Q;
