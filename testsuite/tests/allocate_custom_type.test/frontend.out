with GC;
with GC.Standard; use GC.Standard;
procedure Test is
   AGC_Base_Root_Count : Natural := GC.Root_Count;
   type T is record
      X : Integer;
   end record;
   function AGC_Register is new GC.Register (T);
   type T_Access is access all T;
   function AGC_Register is new GC.Register (T_Access);
   function AGC_Func_0 return T_Access is
      AGC_Base_Root_Count : Natural               := GC.Root_Count;
      AGC_Temp_0 : aliased Test.T_Access := AGC_Register (new T'(X => 2));
   begin
      GC.Push_Root (AGC_Temp_0'Address);
      return AGC_Ret : T_Access := AGC_Temp_0 do
         null;
         GC.Pop_Roots (AGC_Base_Root_Count);
      end return;
      GC.Pop_Roots (AGC_Base_Root_Count);
   end AGC_Func_0;
   X : aliased T_Access := AGC_Func_0;
begin
   GC.Push_Root (X'Address);
   null;
   GC.Pop_Roots (AGC_Base_Root_Count);
end Test;
