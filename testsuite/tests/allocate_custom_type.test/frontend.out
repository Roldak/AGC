with GC;
with GC.Standard; use GC.Standard;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   AGC_Base_Root_Count : Natural := GC.Root_Count;
   type T is record
      X : Integer;
   end record;
   function AGC_Register is new GC.Register (T);
   procedure Visitor_Test_T (X : System.Address);
   procedure Visitor_Test_T (X : System.Address) is
      pragma Suppress (Accessibility_Check);
      type Rec_Access is access all T;
      for Rec_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion
        (System.Address, Rec_Access);
      R : aliased T := Conv (X).all;
   begin
      null;
      declare
         C : aliased Standard.Integer := R.X;
      begin
         Visitor_Standard_Integer (C'Address);
      end;
   end Visitor_Test_T;
   type T_Access is access all T;
   function AGC_Register is new GC.Register (T_Access);
   procedure Visitor_Test_T_Access is new GC.Visit_Access_Type
     (T, T_Access, Visitor_Test_T);
   function AGC_Func_0 return T_Access is
      AGC_Base_Root_Count : Natural               := GC.Root_Count;
      AGC_Temp_0 : aliased Test.T_Access := AGC_Register (new T'(X => 2));
   begin
      GC.Push_Root (AGC_Temp_0'Address, Visitor_Test_T_Access'Address);
      return AGC_Ret : T_Access := AGC_Temp_0 do
         null;
         GC.Pop_Roots (AGC_Base_Root_Count);
      end return;
      GC.Pop_Roots (AGC_Base_Root_Count);
   end AGC_Func_0;
   X : aliased T_Access := AGC_Func_0;
begin
   GC.Push_Root (X'Address, Visitor_Test_T_Access'Address);
   null;
   GC.Pop_Roots (AGC_Base_Root_Count);
end Test;
