with GC;
with GC.Storage;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   AGC_Base_Root_Count : Natural := GC.Root_Count;
   pragma Default_Storage_Pool (GC.Storage.Pool);
   type T is record
      X : Integer;
   end record;
   procedure AGC_Visit_Test_T (X : System.Address);
   procedure AGC_Visit_Test_T (X : System.Address) is
      pragma Suppress (Accessibility_Check);
      type Rec_Access is access all T;
      for Rec_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion
        (System.Address, Rec_Access);
      R : aliased T := Conv (X).all;
   begin
      null;
   end AGC_Visit_Test_T;
   type T_Access is access all T;
   procedure AGC_Visit_Test_T_Access is new GC.Visit_Access_Type
     (T, T_Access, AGC_Visit_Test_T);
   X : aliased T_Access := new T'(X => 2);
begin
   GC.Push_Root (X'Address, AGC_Visit_Test_T_Access'Address);
   GC.Collect;
   GC.Pop_Roots (AGC_Base_Root_Count);
end Test;
