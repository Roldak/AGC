with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   package Pkg is
      type T is private;
      procedure AGC_Visit_T_Private (X : System.Address);
   private
      type T is record
         X : Integer;
      end record;
      procedure AGC_Visit_T (X : System.Address);
   end Pkg;
   package body Pkg is
      procedure AGC_Visit_T_Private (X : System.Address) renames
        Test.Pkg.AGC_Visit_T;
      procedure AGC_Visit_T (X : System.Address) is
         pragma Suppress (Accessibility_Check);
         type Rec_Access is access all T;
         for Rec_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, Rec_Access);
         R : T renames Conv (X).all;
      begin
         null;
      end AGC_Visit_T;
   end Pkg;
   subtype PT is Pkg.T;
   type R is record
      V : Natural;
      D : PT;
   end record;
   procedure AGC_Visit_R (X : System.Address);
   procedure AGC_Visit_R (X : System.Address) is
      pragma Suppress (Accessibility_Check);
      type Rec_Access is access all R;
      for Rec_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion
        (System.Address, Rec_Access);
      R : R renames Conv (X).all;
   begin
      declare
         C : aliased Test.PT := R.D;
      begin
         Test.Pkg.AGC_Visit_T_Private (C'Address);
      end;
   end AGC_Visit_R;
   X           : aliased R;
   AGC_Dummy_0 : constant AGC.Empty_Type :=
     AGC.Push_Root (X'Address, Test.AGC_Visit_R'Address);
begin
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
