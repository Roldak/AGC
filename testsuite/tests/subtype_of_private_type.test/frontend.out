with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   package Pkg is
      type T is private;
      procedure AGC_Visit_T_Private (X : System.Address) with
        Inline;
   private
      type Integer_Access is access Integer;
      for Integer_Access'Storage_Pool use AGC.Storage.Get.Pool;
      procedure AGC_Visit_Integer_Access (X : System.Address) with
        Inline;
      function AGC_Register_Integer_Access
        (X : Integer_Access) return Integer_Access with
        Inline;
      type T is record
         X : Integer_Access;
      end record;
      procedure AGC_Visit_T (X : System.Address) with
        Inline;
   end Pkg;

   package body Pkg is
      procedure AGC_Visit_T_Private (X : System.Address) renames
        Test.Pkg.AGC_Visit_T;
      package AGC_Integer_Access_Ops_Implem is new AGC.Access_Type_Operations
        (Standard.Integer, Integer_Access, False, AGC.No_Op);
      procedure AGC_Visit_Integer_Access (X : System.Address) renames
        AGC_Integer_Access_Ops_Implem.Mark_And_Visit_Access_Type;
      function AGC_Register_Integer_Access
        (X : Integer_Access) return Integer_Access renames
        AGC_Integer_Access_Ops_Implem.Register;
      procedure AGC_Visit_T (X : System.Address) is
         pragma Suppress (All_Checks);
         type Rec_Access is access T with
           Storage_Size => 0;
         for Rec_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, Rec_Access);
         R : T renames Conv (X).all;
      begin
         Test.Pkg.AGC_Visit_Integer_Access (R.X'Address);
      end AGC_Visit_T;
   end Pkg;
   subtype PT is Pkg.T;

   type R is record
      V : Natural;
      D : PT;
   end record;

   procedure AGC_Visit_R (X : System.Address) with
     Inline;
   procedure AGC_Visit_R (X : System.Address) is
      pragma Suppress (All_Checks);
      type Rec_Access is access R with
        Storage_Size => 0;
      for Rec_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion
        (System.Address, Rec_Access);
      R : R renames Conv (X).all;
   begin
      Test.Pkg.AGC_Visit_T_Private (R.D'Address);
   end AGC_Visit_R;
   X           : aliased R;
   AGC_Dummy_0 : constant AGC.Empty_Type :=
     AGC.Push_Root (X'Address, Test.AGC_Visit_R'Address);
begin
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
