with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
package body Pkg is
   package body Inner is
      procedure AGC_Visit_Integer_Access_Implem is new AGC
        .Mark_And_Visit_Access_Type
        (Standard.Integer, False, AGC.No_Op);
      procedure AGC_Visit_Integer_Access (X : System.Address) renames
        AGC_Visit_Integer_Access_Implem;
      procedure AGC_Visit_Rec (X : System.Address) is
         pragma Suppress (Accessibility_Check);
         type Rec_Access is access all Rec;
         for Rec_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, Rec_Access);
         R : Rec renames Conv (X).all;
      begin
         declare
            C : aliased Pkg.Inner.Integer_Access := R.X;
         begin
            Pkg.Inner.AGC_Visit_Integer_Access (C'Address);
         end;
      end AGC_Visit_Rec;
   end Inner;
   procedure Foo is null;
end Pkg;
with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
package Pkg is
   procedure Foo;
   package Inner is
      type Integer_Access is access Integer with
         Storage_Pool => AGC.Storage.Get.Pool;
      procedure AGC_Visit_Integer_Access (X : System.Address);
      type Rec is record
         X : Integer_Access;
      end record;
      procedure AGC_Visit_Rec (X : System.Address);
   end Inner;
end Pkg;
