with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   pragma Default_Storage_Pool (AGC.Storage.Get.Pool);
   type Integer_Access is access Integer;
   procedure AGC_Visit_Integer_Access (X : System.Address);
   procedure AGC_Visit_Integer_Access_Implem is new AGC.Visit_Access_Type
     (Standard.Integer, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Visit_Integer_Access_Implem;
   type Int_Array is array (Positive range <>) of Integer_Access;
   procedure AGC_Visit_Int_Array is new AGC.Visit_Unconstrained_Array_1_Type
     (Integer_Access, Positive, Int_Array, Test.AGC_Visit_Integer_Access);
   function AGC_Func_0 return Int_Array;
   function AGC_Func_0 return Int_Array is
      AGC_Base_Root_Count : constant Natural            := AGC.Root_Count;
      AGC_Temp_0          : aliased Test.Integer_Access := new Integer'(1);
      AGC_Dummy_0         : constant AGC.Empty_Type     :=
        AGC.Push_Root
          (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
   begin
      return AGC_Ret : Int_Array (2 .. 10) := (others => AGC_Temp_0) do
         AGC.Pop_Roots (AGC_Base_Root_Count);
      end return;
   end AGC_Func_0;
   X           : aliased Int_Array       := AGC_Func_0;
   AGC_Dummy_0 : constant AGC.Empty_Type :=
     AGC.Push_Root (X'Address, Test.AGC_Visit_Int_Array'Address);
begin
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
