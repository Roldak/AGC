with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with Ada.Text_IO; use Ada.Text_IO;
with Ada.Containers.Vectors;

procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   type Integer_Access is access all Integer;

   for Integer_Access'Storage_Pool use AGC.Storage.Get.Pool;
   procedure AGC_Visit_Integer_Access (X : System.Address) with
      Inline;
   package AGC_Integer_Access_Ops_Implem is new AGC.Access_Type_Operations
     (Standard.Integer, Integer_Access, True, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Integer_Access_Ops_Implem.Mark_And_Visit_Access_Type;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access with
      Inline;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access renames
     AGC_Integer_Access_Ops_Implem.Register;
   package Int_Vectors is new Ada.Containers.Vectors
     (Positive, Integer_Access);

   package AGC_Int_Vectors_Visitors is new AGC.Standard
     .Ada_Containers_Vectors_Visitors
     (Int_Vectors, AGC_Visit_Index_Type => AGC.No_Op,
      AGC_Visit_Element_Type            => Test.AGC_Visit_Integer_Access);
   V           : aliased Int_Vectors.Vector;
   AGC_Dummy_0 : constant AGC.Empty_Type :=
     AGC.Push_Root
       (V'Address,
        Test.AGC_Int_Vectors_Visitors.AGC_Visit_Vector_Private'Address);
begin
   declare
      AGC_Root_Count : constant Natural            := AGC.Root_Count;
      AGC_Temp_0     : aliased Test.Integer_Access :=
        Test.AGC_Register_Integer_Access
          (Test.Integer_Access'(new Integer'(1)));
      AGC_Dummy_1 : constant AGC.Empty_Type :=
        AGC.Push_Root
          (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
   begin
      V.Append (AGC_Temp_0);
      AGC.Pop_Roots (AGC_Root_Count);
   end;
   declare
      AGC_Root_Count : constant Natural            := AGC.Root_Count;
      AGC_Temp_0     : aliased Test.Integer_Access :=
        Test.AGC_Register_Integer_Access
          (Test.Integer_Access'(new Integer'(2)));
      AGC_Dummy_2 : constant AGC.Empty_Type :=
        AGC.Push_Root
          (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
   begin
      V.Append (AGC_Temp_0);
      AGC.Pop_Roots (AGC_Root_Count);
   end;
   declare
      AGC_Root_Count : constant Natural            := AGC.Root_Count;
      AGC_Temp_0     : aliased Test.Integer_Access :=
        Test.AGC_Register_Integer_Access
          (Test.Integer_Access'(new Integer'(3)));
      AGC_Dummy_3 : constant AGC.Empty_Type :=
        AGC.Push_Root
          (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
   begin
      V.Append (AGC_Temp_0);
      AGC.Pop_Roots (AGC_Root_Count);
   end;
   AGC.Collect;
   for X of V loop
      Put_Line (X.all'Image);
   end loop;
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
