with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with Ada.Text_IO; use Ada.Text_IO;
with Ada.Containers.Vectors;
procedure Test is
   AGC_Base_Root_Count : Natural := AGC.Root_Count;
   pragma Default_Storage_Pool (AGC.Storage.Get.Pool);
   type Integer_Access is access all Integer;
   procedure AGC_Visit_Integer_Access is new AGC.Visit_Access_Type
     (Integer, Integer_Access, True, AGC.No_Op);
   package Int_Vectors is new Ada.Containers.Vectors
     (Positive, Integer_Access);
   package AGC_Int_Vectors_Visitors is new AGC.Standard
     .Ada_Containers_Vectors_Visitors
     (Int_Vectors, Test.AGC_Visit_Integer_Access);
   V : aliased Int_Vectors.Vector;
begin
   AGC.Push_Root
     (V'Address,
      Test.AGC_Int_Vectors_Visitors.AGC_Visit_Vector_Private'Address);
   declare
      AGC_Root_Count : Natural                     := AGC.Root_Count;
      AGC_Temp_0     : aliased Test.Integer_Access := new Integer'(1);
   begin
      AGC.Push_Root
        (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
      V.Append (AGC_Temp_0);
      AGC.Pop_Roots (AGC_Root_Count);
   end;
   declare
      AGC_Root_Count : Natural                     := AGC.Root_Count;
      AGC_Temp_0     : aliased Test.Integer_Access := new Integer'(2);
   begin
      AGC.Push_Root
        (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
      V.Append (AGC_Temp_0);
      AGC.Pop_Roots (AGC_Root_Count);
   end;
   declare
      AGC_Root_Count : Natural                     := AGC.Root_Count;
      AGC_Temp_0     : aliased Test.Integer_Access := new Integer'(3);
   begin
      AGC.Push_Root
        (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
      V.Append (AGC_Temp_0);
      AGC.Pop_Roots (AGC_Root_Count);
   end;
   AGC.Collect;
   for X of V loop
      Put_Line (X.all'Image);
   end loop;
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
