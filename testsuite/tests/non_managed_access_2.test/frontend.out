with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with Ada.Text_IO; use Ada.Text_IO;
with Ada.Unchecked_Conversion;
with System;      use System;
with AGC;
procedure Test is
   type Integer_Access is access Integer with
      Storage_Pool => AGC.Storage.Get.Pool;
   procedure AGC_Visit_Integer_Access (X : System.Address);
   procedure AGC_Visit_Integer_Access_Implem is new AGC
     .Mark_And_Visit_Access_Type
     (Standard.Integer, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Visit_Integer_Access_Implem;
   type Rec is record
      X : Integer_Access;
   end record;
   procedure AGC_Visit_Rec (X : System.Address);
   procedure AGC_Visit_Rec (X : System.Address) is
      pragma Suppress (Accessibility_Check);
      type Rec_Access is access all Rec;
      for Rec_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion
        (System.Address, Rec_Access);
      R : Rec renames Conv (X).all;
   begin
      declare
         C : aliased Test.Integer_Access := R.X;
      begin
         Test.AGC_Visit_Integer_Access (C'Address);
      end;
   end AGC_Visit_Rec;
   type My_Rec_Access is access Rec with
      Storage_Pool => AGC.Non_Managed'Storage_Pool;
   procedure AGC_Visit_My_Rec_Access (X : System.Address);
   procedure AGC_Visit_My_Rec_Access_Implem is new AGC.Visit_Access_Type
     (Test.Rec, False, Test.AGC_Visit_Rec);
   procedure AGC_Visit_My_Rec_Access (X : System.Address) renames
     AGC_Visit_My_Rec_Access_Implem;
   function Alloc (X : Integer) return Address is
      AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
      function AGC_Func_0 return My_Rec_Access;
      function AGC_Func_0 return My_Rec_Access is
         AGC_Base_Root_Count : constant Natural            := AGC.Root_Count;
         AGC_Temp_0          : aliased Test.Integer_Access := new Integer'(X);
         AGC_Dummy_0         : constant AGC.Empty_Type     :=
           AGC.Push_Root
             (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
      begin
         return AGC_Ret : My_Rec_Access := new Rec'(X => AGC_Temp_0) do
            AGC.Pop_Roots (AGC_Base_Root_Count);
         end return;
      end AGC_Func_0;
      R           : aliased My_Rec_Access   := AGC_Func_0;
      AGC_Dummy_0 : constant AGC.Empty_Type :=
        AGC.Push_Root (R'Address, Test.AGC_Visit_My_Rec_Access'Address);
   begin
      return AGC_Ret : Address := R.all'Address do
         AGC.Pop_Roots (AGC_Base_Root_Count);
      end return;
   end Alloc;
   function Deref (X : Address) return Integer is
      AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
      function Convert is new Ada.Unchecked_Conversion
        (Address, My_Rec_Access);
   begin
      declare
         AGC_Temp_0  : aliased Test.My_Rec_Access := Convert (X);
         AGC_Dummy_0 : constant AGC.Empty_Type    :=
           AGC.Push_Root
             (AGC_Temp_0'Address, Test.AGC_Visit_My_Rec_Access'Address);
      begin
         AGC.Pop_Roots (AGC_Base_Root_Count);
         return AGC_Temp_0.all.X.all;
      end;
   end Deref;
   X : System.Address := Alloc (3);
begin
   AGC.Collect;
   Put_Line (Deref (X)'Image);
end Test;
