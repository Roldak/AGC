with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with AGC.Storage.Controlled;
with System;
with Ada.Unchecked_Conversion;
with AGC;
procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   Error : exception;
   type Integer_Access is access Integer;
   for Integer_Access'Storage_Pool use AGC.Storage.Get.Pool;
   procedure AGC_Visit_Integer_Access (X : System.Address);
   package AGC_Integer_Access_Ops_Implem is new AGC.Access_Type_Operations
     (Standard.Integer, Integer_Access, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Integer_Access_Ops_Implem.Mark_And_Visit_Access_Type;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access renames
     AGC_Integer_Access_Ops_Implem.Register;
begin
   declare
      AGC_Root_Count : constant Natural := AGC.Root_Count;
   begin
      declare
         X : aliased Integer_Access :=
           Test.AGC_Register_Integer_Access
             (Test.Integer_Access'(new Integer'(2)));
         AGC_Dummy_0 : constant AGC.Empty_Type :=
           AGC.Push_Root (X'Address, Test.AGC_Visit_Integer_Access'Address);
      begin
         raise Error;
      end;
   exception
      when Error =>
         AGC.Pop_Roots (AGC_Root_Count);
   end;
   AGC.Collect;
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
