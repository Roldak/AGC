package body Pkg is
   package body Inner is
      procedure AGC_Visit_Rec2 (X : System.Address) is
         pragma Suppress (Accessibility_Check);
         type Rec_Access is access all Rec2;
         for Rec_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, Rec_Access);
         R : Rec2 renames Conv (X).all;
      begin
         declare
            C : aliased Pkg.Rec1 := R.X;
         begin
            Pkg.AGC_Visit_Rec1 (C'Address);
         end;
      end AGC_Visit_Rec2;
      procedure AGC_Visit_Rec3 (X : System.Address) is
         pragma Suppress (Accessibility_Check);
         type Rec_Access is access all Rec3;
         for Rec_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, Rec_Access);
         R : Rec3 renames Conv (X).all;
      begin
         declare
            C : aliased Pkg.Inner.Rec2 := R.X;
         begin
            Pkg.Inner.AGC_Visit_Rec2 (C'Address);
         end;
      end AGC_Visit_Rec3;
   end Inner;
   procedure AGC_Visit_Integer_Access_Implem is new AGC
     .Mark_And_Visit_Access_Type
     (Standard.Integer, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Visit_Integer_Access_Implem;
   procedure AGC_Visit_Rec1 (X : System.Address) is
      pragma Suppress (Accessibility_Check);
      type Rec_Access is access all Rec1;
      for Rec_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion
        (System.Address, Rec_Access);
      R : Rec1 renames Conv (X).all;
   begin
      declare
         C : aliased Pkg.Integer_Access := R.X;
      begin
         Pkg.AGC_Visit_Integer_Access (C'Address);
      end;
   end AGC_Visit_Rec1;
   procedure AGC_Visit_Rec4 (X : System.Address) is
      pragma Suppress (Accessibility_Check);
      type Rec_Access is access all Rec4;
      for Rec_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion
        (System.Address, Rec_Access);
      R : Rec4 renames Conv (X).all;
   begin
      declare
         C : aliased Pkg.Inner.Rec3 := R.X;
      begin
         Pkg.Inner.AGC_Visit_Rec3 (C'Address);
      end;
   end AGC_Visit_Rec4;
end Pkg;
with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
package Pkg is
   type Integer_Access is access Integer with
      Storage_Pool => AGC.Storage.Get.Pool;
   procedure AGC_Visit_Integer_Access (X : System.Address);
   type Rec1 is record
      X : Integer_Access;
   end record;
   procedure AGC_Visit_Rec1 (X : System.Address);
   package Inner is
      type Rec2 is record
         X : Rec1;
      end record;
      procedure AGC_Visit_Rec2 (X : System.Address);
      type Rec3 is record
         X : Rec2;
      end record;
      procedure AGC_Visit_Rec3 (X : System.Address);
   end Inner;
   type Rec4 is record
      X : Inner.Rec3;
   end record;
   procedure AGC_Visit_Rec4 (X : System.Address);
end Pkg;
