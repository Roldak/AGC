package body Pkg is
   package body Inner is
      procedure AGC_Visit_Rec2 (X : System.Address) is
         pragma Suppress (All_Checks);
         type Rec_Access is access Rec2 with
            Storage_Size => 0;
         for Rec_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, Rec_Access);
         R : Rec2 renames Conv (X).all;
      begin
         Pkg.AGC_Visit_Rec1 (R.X'Address);
      end AGC_Visit_Rec2;
      procedure AGC_Visit_Rec3 (X : System.Address) is
         pragma Suppress (All_Checks);
         type Rec_Access is access Rec3 with
            Storage_Size => 0;
         for Rec_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, Rec_Access);
         R : Rec3 renames Conv (X).all;
      begin
         Pkg.Inner.AGC_Visit_Rec2 (R.X'Address);
      end AGC_Visit_Rec3;
   end Inner;
   package AGC_Integer_Access_Ops_Implem is new AGC.Access_Type_Operations
     (Standard.Integer, Integer_Access, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Integer_Access_Ops_Implem.Mark_And_Visit_Access_Type;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access renames
     AGC_Integer_Access_Ops_Implem.Register;
   procedure AGC_Visit_Rec1 (X : System.Address) is
      pragma Suppress (All_Checks);
      type Rec_Access is access Rec1 with
         Storage_Size => 0;
      for Rec_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion
        (System.Address, Rec_Access);
      R : Rec1 renames Conv (X).all;
   begin
      Pkg.AGC_Visit_Integer_Access (R.X'Address);
   end AGC_Visit_Rec1;
   procedure AGC_Visit_Rec4 (X : System.Address) is
      pragma Suppress (All_Checks);
      type Rec_Access is access Rec4 with
         Storage_Size => 0;
      for Rec_Access'Size use Standard'Address_Size;
      function Conv is new Ada.Unchecked_Conversion
        (System.Address, Rec_Access);
      R : Rec4 renames Conv (X).all;
   begin
      Pkg.Inner.AGC_Visit_Rec3 (R.X'Address);
   end AGC_Visit_Rec4;
end Pkg;
with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
package Pkg is
   type Integer_Access is access Integer;

   for Integer_Access'Storage_Pool use AGC.Storage.Get.Pool;
   procedure AGC_Visit_Integer_Access (X : System.Address) with
      Inline;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access with
      Inline;
   type Rec1 is record
      X : Integer_Access;
   end record;

   procedure AGC_Visit_Rec1 (X : System.Address) with
      Inline;
   package Inner is
      type Rec2 is record
         X : Rec1;
      end record;

      procedure AGC_Visit_Rec2 (X : System.Address) with
         Inline;
      type Rec3 is record
         X : Rec2;
      end record;
      procedure AGC_Visit_Rec3 (X : System.Address) with
         Inline;
   end Inner;

   type Rec4 is record
      X : Inner.Rec3;
   end record;
   procedure AGC_Visit_Rec4 (X : System.Address) with
      Inline;
end Pkg;
