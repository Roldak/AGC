with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with Ada.Text_IO; use Ada.Text_IO;

procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   package P is
      type T is private;

      procedure AGC_Visit_T_Private (X : System.Address) with
         Inline;
      function Create (X : Integer) return T;
      function Get (X : T) return Integer;
   private
      type T is access all Integer;
      for T'Storage_Pool use AGC.Storage.Get.Pool;
      procedure AGC_Visit_T (X : System.Address) with
         Inline;
      function AGC_Register_T (X : T) return T with
         Inline;
   end P;

   package body P is
      procedure AGC_Visit_T_Private (X : System.Address) renames
        Test.P.AGC_Visit_T;
      package AGC_T_Ops_Implem is new AGC.Access_Type_Operations
        (Standard.Integer, T, True, AGC.No_Op);
      procedure AGC_Visit_T (X : System.Address) renames
        AGC_T_Ops_Implem.Mark_And_Visit_Access_Type;
      function AGC_Register_T (X : T) return T renames
        AGC_T_Ops_Implem.Register;
      function Create (X : Integer) return T is
      begin
         return Test.P.AGC_Register_T (Test.P.T'(new Integer'(X)));
      end Create;

      function Get (X : T) return Integer is
      begin
         return X.all;
      end Get;
   end P;

   X           : aliased P.T             := P.Create (2);
   AGC_Dummy_0 : constant AGC.Empty_Type :=
     AGC.Push_Root (X'Address, Test.P.AGC_Visit_T_Private'Address);
begin
   AGC.Collect;
   Put_Line (P.Get (X)'Image);
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
