with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   type Integer_Access is access Integer;

   --  unconstrained array
   for Integer_Access'Storage_Pool use AGC.Storage.Get.Pool;
   procedure AGC_Visit_Integer_Access (X : System.Address) with
      Inline;
   package AGC_Integer_Access_Ops_Implem is new AGC.Access_Type_Operations
     (Standard.Integer, Integer_Access, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Integer_Access_Ops_Implem.Mark_And_Visit_Access_Type;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access with
      Inline;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access renames
     AGC_Integer_Access_Ops_Implem.Register;
   type Int_Arr is array (Positive range <>) of Integer_Access;

   --  constrained array
   procedure AGC_Visit_Int_Arr is new AGC.Visit_Unconstrained_Array_1_Type
     (Integer_Access, Positive, Int_Arr, Test.AGC_Visit_Integer_Access);
   type Char_Arr is array (Character) of Integer_Access;

   procedure AGC_Visit_Char_Arr is new AGC.Visit_Constrained_Array_1_Type
     (Integer_Access, Character, Char_Arr, Test.AGC_Visit_Integer_Access);
   function AGC_Func_0 return Int_Arr;
   function AGC_Func_0 return Int_Arr is
      AGC_Base_Root_Count : constant Natural            := AGC.Root_Count;
      AGC_Temp_2          : aliased Test.Integer_Access :=
        Test.AGC_Register_Integer_Access
          (Test.Integer_Access'(new Integer'(21)));
      AGC_Dummy_0 : constant AGC.Empty_Type :=
        AGC.Push_Root
          (AGC_Temp_2'Address, Test.AGC_Visit_Integer_Access'Address);
      AGC_Temp_1 : aliased Test.Integer_Access :=
        Test.AGC_Register_Integer_Access
          (Test.Integer_Access'(new Integer'(12)));
      AGC_Dummy_1 : constant AGC.Empty_Type :=
        AGC.Push_Root
          (AGC_Temp_1'Address, Test.AGC_Visit_Integer_Access'Address);
      AGC_Temp_0 : aliased Test.Integer_Access :=
        Test.AGC_Register_Integer_Access
          (Test.Integer_Access'(new Integer'(42)));
      AGC_Dummy_2 : constant AGC.Empty_Type :=
        AGC.Push_Root
          (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
   begin
      return
        AGC_Ret : Int_Arr :=
          (1 => AGC_Temp_0, 2 => AGC_Temp_1, 3 => AGC_Temp_2) do
         AGC.Pop_Roots (AGC_Base_Root_Count);
      end return;
   end AGC_Func_0;
   X : aliased Int_Arr := AGC_Func_0;

   AGC_Dummy_0 : constant AGC.Empty_Type :=
     AGC.Push_Root (X'Address, Test.AGC_Visit_Int_Arr'Address);
   Y           : aliased Char_Arr;
   AGC_Dummy_1 : constant AGC.Empty_Type :=
     AGC.Push_Root (Y'Address, Test.AGC_Visit_Char_Arr'Address);
begin
   AGC.Collect;
   X (2).all := 145;
   Y ('b')   := X (3);
   AGC.Collect;
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
