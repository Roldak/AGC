with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   AGC_Base_Root_Count : Natural := AGC.Root_Count;
   pragma Default_Storage_Pool (AGC.Storage.Get.Pool);
   type Integer_Access is access Integer;
   procedure AGC_Visit_Integer_Access (X : System.Address);
   procedure AGC_Visit_Integer_Access_Implem is new AGC.Visit_Access_Type
     (Standard.Integer, Integer_Access, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Visit_Integer_Access_Implem;
   type Int_Arr is array (Positive range <>) of Integer_Access;
   procedure AGC_Visit_Int_Arr is new AGC.Visit_Unconstrained_Array_Type
     (Integer_Access, Positive, Int_Arr, Test.AGC_Visit_Integer_Access);
   type Char_Arr is array (Character) of Integer_Access;
   procedure AGC_Visit_Char_Arr is new AGC.Visit_Constrained_Array_Type
     (Integer_Access, Character, Char_Arr, Test.AGC_Visit_Integer_Access);
   function AGC_Func_0 return Int_Arr is
      AGC_Base_Root_Count : Natural                     := AGC.Root_Count;
      AGC_Temp_2          : aliased Test.Integer_Access := new Integer'(21);
   begin
      AGC.Push_Root
        (AGC_Temp_2'Address, Test.AGC_Visit_Integer_Access'Address);
      declare
         AGC_Temp_1 : aliased Test.Integer_Access := new Integer'(12);
      begin
         AGC.Push_Root
           (AGC_Temp_1'Address, Test.AGC_Visit_Integer_Access'Address);
         declare
            AGC_Temp_0 : aliased Test.Integer_Access := new Integer'(42);
         begin
            AGC.Push_Root
              (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
            return
              AGC_Ret : Int_Arr :=
                (1 => AGC_Temp_0, 2 => AGC_Temp_1, 3 => AGC_Temp_2) do
               AGC.Pop_Roots (AGC_Base_Root_Count);
            end return;
         end;
      end;
   end AGC_Func_0;
   X : aliased Int_Arr := AGC_Func_0;
begin
   AGC.Push_Root (X'Address, Test.AGC_Visit_Int_Arr'Address);
   declare
      Y : aliased Char_Arr;
   begin
      AGC.Push_Root (Y'Address, Test.AGC_Visit_Char_Arr'Address);
      AGC.Collect;
      X (2).all := 145;
      Y ('b')   := X (3);
      AGC.Collect;
   end;
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
