with GC;
with GC.Standard; use GC.Standard;
procedure Test is
   AGC_Base_Root_Count : Natural := GC.Root_Count;
   subtype My_Natural is Integer range 0 .. Integer'Last;
   function AGC_Register is new GC.Register (My_Natural);
   procedure Visitor_Test_My_Natural is new GC.No_Op (My_Natural);
   type My_Nat_Access is access all My_Natural;
   function AGC_Register is new GC.Register (My_Nat_Access);
   procedure Visitor_Test_My_Nat_Access is new GC.Visit_Access_Type
     (My_Natural, My_Nat_Access, Visitor_Test_My_Natural);
   function AGC_Func_0 return My_Nat_Access is
      AGC_Base_Root_Count : Natural                    := GC.Root_Count;
      AGC_Temp_0          : aliased Test.My_Nat_Access :=
        AGC_Register (new My_Natural'(2));
   begin
      GC.Push_Root (AGC_Temp_0'Address, Visitor_Test_My_Nat_Access'Address);
      return AGC_Ret : My_Nat_Access := AGC_Temp_0 do
         null;
         GC.Pop_Roots (AGC_Base_Root_Count);
      end return;
      GC.Pop_Roots (AGC_Base_Root_Count);
   end AGC_Func_0;
   X : aliased My_Nat_Access := AGC_Func_0;
begin
   GC.Push_Root (X'Address, Visitor_Test_My_Nat_Access'Address);
   null;
   GC.Pop_Roots (AGC_Base_Root_Count);
end Test;
