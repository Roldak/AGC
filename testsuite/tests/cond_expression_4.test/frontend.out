with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with Ada.Text_IO; use Ada.Text_IO;

procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   type Integer_Access is access Integer;

   for Integer_Access'Storage_Pool use AGC.Storage.Get.Pool;
   procedure AGC_Visit_Integer_Access (X : System.Address) with
      Inline;
   package AGC_Integer_Access_Ops_Implem is new AGC.Access_Type_Operations
     (Standard.Integer, Integer_Access, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Integer_Access_Ops_Implem.Mark_And_Visit_Access_Type;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access with
      Inline;
   function AGC_Register_Integer_Access
     (X : Integer_Access) return Integer_Access renames
     AGC_Integer_Access_Ops_Implem.Register;
   function Foo return Integer_Access;
   function Foo return Integer_Access is
   begin
      return (null);
   end Foo;
   function Eq (X, Y : Integer_Access) return Integer_Access;
   function Eq (X, Y : Integer_Access) return Integer_Access is
   begin
      return
        AGC_Ret : Integer_Access :=
          (Test.AGC_Register_Integer_Access
             (Test.Integer_Access'
                (new Integer'(if X.all = Y.all then 1 else 0))))
      do
         null;
      end return;
   end Eq;
begin
   declare
      function AGC_Func_0 return Standard.Boolean is
         AGC_Base_Root_Count : constant Natural            := AGC.Root_Count;
         AGC_Temp_2          : aliased Test.Integer_Access :=
           Test.AGC_Register_Integer_Access
             (Test.Integer_Access'(new Integer'(3)));
         AGC_Dummy_0 : constant AGC.Empty_Type :=
           AGC.Push_Root
             (AGC_Temp_2'Address, Test.AGC_Visit_Integer_Access'Address);
         AGC_Temp_1  : aliased Test.Integer_Access := Foo;
         AGC_Dummy_1 : constant AGC.Empty_Type     :=
           AGC.Push_Root
             (AGC_Temp_1'Address, Test.AGC_Visit_Integer_Access'Address);
         AGC_Temp_0 : aliased Test.Integer_Access :=
           Eq (AGC_Temp_1, AGC_Temp_2);
         AGC_Dummy_2 : constant AGC.Empty_Type :=
           AGC.Push_Root
             (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
      begin
         return AGC_Ret : Standard.Boolean := AGC_Temp_0.all = 1 do
            AGC.Pop_Roots (AGC_Base_Root_Count);
         end return;
      end AGC_Func_0;
      AGC_Temp_0  : aliased Test.Integer_Access := Foo;
      AGC_Dummy_0 : constant AGC.Empty_Type     :=
        AGC.Push_Root
          (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
   begin
      if AGC_Temp_0 /= null and then AGC_Func_0 then
         Put_Line ("hello");
      else
         Put_Line ("hi");
      end if;
   end;
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
