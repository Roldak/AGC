with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   package Pkg is
      type T is private;
      procedure AGC_Visit_T_Private (X : System.Address) with
        Inline;
      type U is private;
      procedure AGC_Visit_U_Private (X : System.Address) with
        Inline;
      type A is array (Integer range <>) of T;

      procedure AGC_Visit_A (X : System.Address) with
        Inline;
   private
      type T is record
         Value : U;
      end record;
      procedure AGC_Visit_T (X : System.Address) with
        Inline;
      type U is access Integer;
      for U'Storage_Pool use AGC.Storage.Get.Pool;
      procedure AGC_Visit_U (X : System.Address) with
        Inline;
      function AGC_Register_U (X : U) return U with
        Inline;
   end Pkg;

   package body Pkg is
      procedure AGC_Visit_T_Private (X : System.Address) renames
        Test.Pkg.AGC_Visit_T;
      procedure AGC_Visit_U_Private (X : System.Address) renames
        Test.Pkg.AGC_Visit_U;
      procedure AGC_Visit_A_Implem is new AGC.Visit_Unconstrained_Array_1_Type
        (Test.Pkg.T, Integer, A, Test.Pkg.AGC_Visit_T_Private);
      procedure AGC_Visit_A (X : System.Address) renames AGC_Visit_A_Implem;
      procedure AGC_Visit_T (X : System.Address) is
         pragma Suppress (All_Checks);
         type Rec_Access is access T with
           Storage_Size => 0;
         for Rec_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, Rec_Access);
         R : T renames Conv (X).all;
      begin
         Test.Pkg.AGC_Visit_U (R.Value'Address);
      end AGC_Visit_T;
      package AGC_U_Ops_Implem is new AGC.Access_Type_Operations
        (Standard.Integer, U, False, AGC.No_Op);
      procedure AGC_Visit_U (X : System.Address) renames
        AGC_U_Ops_Implem.Mark_And_Visit_Access_Type;
      function AGC_Register_U (X : U) return U renames
        AGC_U_Ops_Implem.Register;
   end Pkg;
   X           : aliased Pkg.A (1 .. 10);
   AGC_Dummy_0 : constant AGC.Empty_Type :=
     AGC.Push_Root (X'Address, Test.Pkg.AGC_Visit_A'Address);
begin
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
