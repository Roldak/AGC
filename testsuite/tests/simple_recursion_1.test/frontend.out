with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with Ada.Text_IO; use Ada.Text_IO;
procedure Test is
   type Integer_Access is access Integer with
      Storage_Pool => AGC.Storage.Get.Pool;
   procedure AGC_Visit_Integer_Access (X : System.Address);
   procedure AGC_Visit_Integer_Access_Implem is new AGC.Visit_Access_Type
     (Standard.Integer, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Visit_Integer_Access_Implem;
   procedure Foo (N : Natural) is
      AGC_Base_Root_Count : constant Natural        := AGC.Root_Count;
      X                   : aliased Integer_Access  := new Integer'(42);
      AGC_Dummy_0         : constant AGC.Empty_Type :=
        AGC.Push_Root (X'Address, Test.AGC_Visit_Integer_Access'Address);
   begin
      if N < 100 then
         Foo (N + 1);
      end if;
      AGC.Pop_Roots (AGC_Base_Root_Count);
   end Foo;
begin
   Foo (0);
   AGC.Collect;
end Test;
