with GC;
with GC.Standard; use GC.Standard;
with Ada.Text_IO; use Ada.Text_IO;
procedure Test is
   AGC_Base_Root_Count : Natural := GC.Root_Count;
   type Integer_Access is access all Integer;
   function AGC_Register is new GC.Register (Integer_Access);
   function AGC_Temp is new GC.Temp (Integer_Access);
   procedure Foo (N : Natural) is
      AGC_Base_Root_Count : Natural := GC.Root_Count;
      function AGC_Func_0 return Integer_Access is
         AGC_Base_Root_Count : Natural                     := GC.Root_Count;
         AGC_Temp_0          : aliased Test.Integer_Access :=
           AGC_Register (new Integer'(42));
      begin
         GC.Push_Root (AGC_Temp_0'Address);
         return AGC_Ret : Integer_Access := AGC_Temp_0 do
            null;
            GC.Pop_Roots (AGC_Base_Root_Count);
         end return;
         GC.Pop_Roots (AGC_Base_Root_Count);
      end AGC_Func_0;
      X : aliased Integer_Access := AGC_Func_0;
   begin
      GC.Push_Root (X'Address);
      if N < 100 then
         Foo (N + 1);
      end if;
      GC.Pop_Roots (AGC_Base_Root_Count);
   end Foo;
begin
   Foo (0);
   GC.Collect;
   GC.Pop_Roots (AGC_Base_Root_Count);
end Test;
