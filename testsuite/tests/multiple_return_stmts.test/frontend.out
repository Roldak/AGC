with GC;
with GC.Standard; use GC.Standard;
with Ada.Text_IO; use Ada.Text_IO;
procedure Test is
   AGC_Base_Root_Count : Natural := GC.Root_Count;
   type Integer_Access is access all Integer;
   function AGC_Register is new GC.Register (Integer_Access);
   function AGC_Temp is new GC.Temp (Integer_Access);
   function Inner (B : Boolean; X : Integer) return Integer_Access is
      AGC_Base_Root_Count : Natural := GC.Root_Count;
   begin
      if B then
         return
           AGC_Ret : Integer_Access :=
             AGC_Temp (0, AGC_Register (new Integer'(X + 1))) do
            GC.Untemp (0);
            null;
            GC.Pop_Roots (AGC_Base_Root_Count);
         end return;
      else
         return
           AGC_Ret : Integer_Access :=
             AGC_Temp (1, AGC_Register (new Integer'(X - 1))) do
            GC.Untemp (1);
            null;
            GC.Pop_Roots (AGC_Base_Root_Count);
         end return;
      end if;
      GC.Pop_Roots (AGC_Base_Root_Count);
   end Inner;
   A : Integer := AGC_Temp (2, Inner (True, 42)).all;
begin
   GC.Untemp (2);
   GC.Collect;
   GC.Pop_Roots (AGC_Base_Root_Count);
end Test;
