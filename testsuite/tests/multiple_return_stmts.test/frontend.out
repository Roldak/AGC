with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with Ada.Text_IO; use Ada.Text_IO;
procedure Test is
   AGC_Base_Root_Count : Natural := AGC.Root_Count;
   pragma Default_Storage_Pool (AGC.Storage.Get.Pool);
   type Integer_Access is access Integer;
   procedure AGC_Visit_Integer_Access (X : System.Address);
   procedure AGC_Visit_Integer_Access_Implem is new AGC.Visit_Access_Type
     (Standard.Integer, Integer_Access, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Visit_Integer_Access_Implem;
   function Inner (B : Boolean; X : Integer) return Integer_Access is
      AGC_Base_Root_Count : Natural := AGC.Root_Count;
   begin
      if B then
         return AGC_Ret : Integer_Access := new Integer'(X + 1) do
            AGC.Pop_Roots (AGC_Base_Root_Count);
         end return;
      else
         return AGC_Ret : Integer_Access := new Integer'(X - 1) do
            AGC.Pop_Roots (AGC_Base_Root_Count);
         end return;
      end if;
   end Inner;
   function AGC_Func_0 return Integer is
      AGC_Base_Root_Count : Natural                     := AGC.Root_Count;
      AGC_Temp_0          : aliased Test.Integer_Access := Inner (True, 42);
   begin
      AGC.Push_Root
        (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
      return AGC_Ret : Integer := AGC_Temp_0.all do
         AGC.Pop_Roots (AGC_Base_Root_Count);
      end return;
   end AGC_Func_0;
   A : Integer := AGC_Func_0;
begin
   AGC.Collect;
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
