with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with Ada.Text_IO; use Ada.Text_IO;

procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   type Int_Access is access Integer;

   for Int_Access'Storage_Pool use AGC.Storage.Get.Pool;
   procedure AGC_Visit_Int_Access (X : System.Address) with
     Inline;
   package AGC_Int_Access_Ops_Implem is new AGC.Access_Type_Operations
     (Standard.Integer, Int_Access, False, AGC.No_Op);
   procedure AGC_Visit_Int_Access (X : System.Address) renames
     AGC_Int_Access_Ops_Implem.Mark_And_Visit_Access_Type;
   function AGC_Register_Int_Access (X : Int_Access) return Int_Access with
     Inline;
   function AGC_Register_Int_Access (X : Int_Access) return Int_Access renames
     AGC_Int_Access_Ops_Implem.Register;
   X           : aliased Int_Access      :=
     Test.AGC_Register_Int_Access (Test.Int_Access'(new Integer'(1)));
   AGC_Dummy_0 : constant AGC.Empty_Type :=
     AGC.Push_Root (X'Address, Test.AGC_Visit_Int_Access'Address);
begin
   if True then
      Put_Line (X.all'Image);
      AGC.Free (X);
   else
      AGC.Free (X);
      declare
         AGC_Root_Count : constant Natural        := AGC.Root_Count;
         AGC_Temp_0     : aliased Test.Int_Access :=
           Test.AGC_Register_Int_Access (Test.Int_Access'(new Integer'(3)));
         AGC_Dummy_1    : constant AGC.Empty_Type :=
           AGC.Push_Root
             (AGC_Temp_0'Address, Test.AGC_Visit_Int_Access'Address);
      begin
         X := AGC_Temp_0;
         AGC.Pop_Roots (AGC_Root_Count);
      end;
   end if;
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
