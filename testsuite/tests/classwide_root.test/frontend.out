with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
with Ada.Text_IO; use Ada.Text_IO;
procedure Test is
   AGC_Base_Root_Count : constant Natural := AGC.Root_Count;
   pragma Default_Storage_Pool (AGC.Storage.Get.Pool);
   type Integer_Access is access Integer;
   procedure AGC_Visit_Integer_Access (X : System.Address);
   procedure AGC_Visit_Integer_Access_Implem is new AGC.Visit_Access_Type
     (Standard.Integer, Integer_Access, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Visit_Integer_Access_Implem;
   package Pkg_T is
      type T is tagged record
         X : Integer_Access;
      end record;
      procedure AGC_Visit_T (X : System.Address);
      procedure AGC_Visit (X : access T);
      procedure AGC_Visit_T_Classwide (X : System.Address);
      procedure Print (X : T);
   end Pkg_T;
   package body Pkg_T is
      procedure AGC_Visit_T (X : System.Address) is
         pragma Suppress (Accessibility_Check);
         type Rec_Access is access all T'Class;
         for Rec_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, Rec_Access);
         R : aliased T'Class := Conv (X).all;
      begin
         declare
            C : aliased Test.Integer_Access := R.X;
         begin
            Test.AGC_Visit_Integer_Access (C'Address);
         end;
      end AGC_Visit_T;
      procedure AGC_Visit (X : access T) is
      begin
         AGC_Visit_T (X.all'Address);
      end AGC_Visit;
      procedure AGC_Visit_T_Classwide (X : System.Address) is
         pragma Suppress (Accessibility_Check);
         type T_Access is access all T'Class;
         for T_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, T_Access);
      begin
         Conv (X).AGC_Visit;
      end AGC_Visit_T_Classwide;
      procedure Print (X : T) is
      begin
         Put_Line (X.X.all'Image);
      end Print;
   end Pkg_T;
   package Pkg_U is
      type U is new Pkg_T.T with record
         Y : Integer_Access;
      end record;
      procedure AGC_Visit_U (X : System.Address);
      overriding procedure AGC_Visit (X : access U);
      procedure AGC_Visit_U_Classwide (X : System.Address);
      procedure Print (X : U);
   end Pkg_U;
   package body Pkg_U is
      procedure AGC_Visit_U (X : System.Address) is
         pragma Suppress (Accessibility_Check);
         type Rec_Access is access all U'Class;
         for Rec_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, Rec_Access);
         R : aliased U'Class := Conv (X).all;
      begin
         Test.Pkg_T.AGC_Visit_T (X);
         declare
            C : aliased Test.Integer_Access := R.Y;
         begin
            Test.AGC_Visit_Integer_Access (C'Address);
         end;
      end AGC_Visit_U;
      overriding procedure AGC_Visit (X : access U) is
      begin
         AGC_Visit_U (X.all'Address);
      end AGC_Visit;
      procedure AGC_Visit_U_Classwide (X : System.Address) is
         pragma Suppress (Accessibility_Check);
         type T_Access is access all U'Class;
         for T_Access'Size use Standard'Address_Size;
         function Conv is new Ada.Unchecked_Conversion
           (System.Address, T_Access);
      begin
         Conv (X).AGC_Visit;
      end AGC_Visit_U_Classwide;
      procedure Print (X : U) is
      begin
         Put_Line (X.X.all'Image & " " & X.Y.all'Image);
      end Print;
   end Pkg_U;
   function AGC_Func_0 return Pkg_T.T'Class is
      AGC_Base_Root_Count : constant Natural            := AGC.Root_Count;
      AGC_Temp_1          : aliased Test.Integer_Access := new Integer'(2);
   begin
      AGC.Push_Root
        (AGC_Temp_1'Address, Test.AGC_Visit_Integer_Access'Address);
      declare
         AGC_Temp_0 : aliased Test.Integer_Access := new Integer'(1);
      begin
         AGC.Push_Root
           (AGC_Temp_0'Address, Test.AGC_Visit_Integer_Access'Address);
         return
           AGC_Ret : Pkg_T.T'Class :=
             Pkg_U.U'(X => AGC_Temp_0, Y => AGC_Temp_1) do
            AGC.Pop_Roots (AGC_Base_Root_Count);
         end return;
      end;
   end AGC_Func_0;
   X : aliased Pkg_T.T'Class := AGC_Func_0;
begin
   AGC.Push_Root (X'Address, Test.Pkg_T.AGC_Visit_T_Classwide'Address);
   X.Print;
   AGC.Collect;
   X.Print;
   AGC.Pop_Roots (AGC_Base_Root_Count);
end Test;
