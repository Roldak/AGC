package body Pkg is
   procedure AGC_Visit_Integer_Access_Implem is new AGC
     .Mark_And_Visit_Access_Type
     (Standard.Integer, False, AGC.No_Op);
   procedure AGC_Visit_Integer_Access (X : System.Address) renames
     AGC_Visit_Integer_Access_Implem;
   function Foo return Integer_Access is
   begin
      return (null);
   end Foo;
   function AGC_Func_0 return Integer is
      AGC_Base_Root_Count : constant Natural           := AGC.Root_Count;
      AGC_Temp_0          : aliased Pkg.Integer_Access := Foo;
      AGC_Dummy_0         : constant AGC.Empty_Type    :=
        AGC.Push_Root
          (AGC_Temp_0'Address, Pkg.AGC_Visit_Integer_Access'Address);
   begin
      return AGC_Ret : Integer := AGC_Temp_0.all do
         AGC.Pop_Roots (AGC_Base_Root_Count);
      end return;
   end AGC_Func_0;
end Pkg;
with AGC;
with AGC.Standard;
with AGC.Storage.Get;
with System;
with Ada.Unchecked_Conversion;
package Pkg is
   type Integer_Access is access Integer with
      Storage_Pool => AGC.Storage.Get.Pool;
   procedure AGC_Visit_Integer_Access (X : System.Address);
   function Foo return Integer_Access;
   function AGC_Func_0 return Integer;
   Y : Integer := AGC_Func_0;
end Pkg;
