on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
name: Build & Test
jobs:
  build:
    runs-on: ubuntu-latest
    name: Linux build & test
    env:
      PROCESSORS: 0
      PREFIX: "/tmp/ADALIB_DIR"
      GPR_PROJECT_PATH: /tmp/ADALIB_DIR/share/gpr
    steps:
      - name: Get AGC
        uses: actions/checkout@v2

      - name: Get libadalang
        uses: actions/checkout@v2
        with:
          repository: Roldak/libadalang
          ref: topic/env_rework_agc_2
          path: libadalang

      - name: Get langkit
        uses: actions/checkout@v2
        with:
          repository: Roldak/langkit
          ref: topic/env_rework_agc_2
          path: langkit

      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install python dependencies
        run: |
            pip install -r langkit/REQUIREMENTS.dev
            pip install jsonschema
            pip install ./langkit
      - name: Get gprbuild for libgpr
        uses: actions/checkout@v2
        with:
          repository: AdaCore/gprbuild
          path: gprbuild

      - name: Get gnatcoll core
        uses: actions/checkout@v2
        with:
          repository: AdaCore/gnatcoll-core
          path: gnatcoll-core

      - name: Get gnatcoll iconv/gmp
        uses: actions/checkout@v2
        with:
          repository: AdaCore/gnatcoll-bindings
          path: gnatcoll-bindings

      - uses: actions/cache@v2
        with:
          path: ./cached_gnat
          key: ${{ runner.os }}-gnat-ce-2020
      - name: Get GNAT Community 2020 toolchain
        uses: ada-actions/toolchain@ce2020
        with:
          distrib: community
          install_dir: ./cached_gnat
      - name: Clean up GNAT
        # TODO: For unknown reasons, even with all caches disabled, there are
        # sometimes spurious installs of dependencies (gnatcoll-iconv, -gmp and
        # langkit_support) in cached_gnat's install. Try to uninstall them to
        # workaround this issue. We need to uninstall gpr and gnatcoll anyway,
        # as we want their latest versions.
        run: |
            sh langkit/.github/helpers/clean_up_gnat.sh
      - name: Cache build artifacts
        uses: actions/cache@v2
        id: cache
        with:
          path: |
              gprbuild/gpr/libobj
              gnatcoll-core/obj
              gnatcoll-bindings/gmp/obj
              gnatcoll-bindings/iconv/obj
              libadalang/build/obj
              langkit/contrib/python/build/obj
              langkit/contrib/lkt/build/obj
              obj
              lib/obj
          key: ${{ runner.os }}-build-artifacts

      - name: Build dependencies
        run: |
            make -C gprbuild \
                prefix=$PREFIX \
                libgpr.build.shared libgpr.install.shared
            make -C gnatcoll-core prefix=$PREFIX \
                LIBRARY_TYPES="relocatable" build install
            python gnatcoll-bindings/iconv/setup.py \
                build -j0 --prefix=$PREFIX --library-types=relocatable
            python gnatcoll-bindings/iconv/setup.py install
            python gnatcoll-bindings/gmp/setup.py build \
                -j0 --prefix=$PREFIX --library-types=relocatable
            python gnatcoll-bindings/gmp/setup.py install
      - name: Build Langkit
        run: |
            langkit/manage.py build-langkit-support
            langkit/manage.py install-langkit-support $PREFIX
      - name: Build libadalang
        run: |
            langkit/utils/gh_wrap_errors.py ./libadalang/manage.py make -Dgnu-full
      - name: Install & package libadalang
        run: |
            langkit/utils/gh_wrap_errors.py ./libadalang/manage.py install $PREFIX
      - name: Build AGC instrumenter
        run: |
            gprbuild agc.gpr -j0 -p -XLIBRARY_TYPES=relocatable -XXMLADA_BUILD=relocatable
      - name: Build AGC runtime
        run: |
            gprbuild lib/agc_runtime.gpr -XBUILD_MODE=prod -XAGC_POOL=malloc_free -XVALIDATE_ADDRESSES=no -p
      - name: Install valgrind
        run: |
            sudo apt install -y valgrind
      - name: Test AGC
        run: |
            export PATH=$PWD/bin:$PATH
            export GPR_PROJECT_PATH=$PWD/lib:$GPR_PROJECT_PATH
            python testsuite/run_testsuite.py
